{"version":3,"file":"bundle.js","sources":["../../node_modules/svelte/internal/index.mjs","../../src/App.svelte","../../src/main.js"],"sourcesContent":["function noop() { }\nconst identity = x => x;\nfunction assign(tar, src) {\n    // @ts-ignore\n    for (const k in src)\n        tar[k] = src[k];\n    return tar;\n}\nfunction is_promise(value) {\n    return value && typeof value === 'object' && typeof value.then === 'function';\n}\nfunction add_location(element, file, line, column, char) {\n    element.__svelte_meta = {\n        loc: { file, line, column, char }\n    };\n}\nfunction run(fn) {\n    return fn();\n}\nfunction blank_object() {\n    return Object.create(null);\n}\nfunction run_all(fns) {\n    fns.forEach(run);\n}\nfunction is_function(thing) {\n    return typeof thing === 'function';\n}\nfunction safe_not_equal(a, b) {\n    return a != a ? b == b : a !== b || ((a && typeof a === 'object') || typeof a === 'function');\n}\nfunction not_equal(a, b) {\n    return a != a ? b == b : a !== b;\n}\nfunction is_empty(obj) {\n    return Object.keys(obj).length === 0;\n}\nfunction validate_store(store, name) {\n    if (store != null && typeof store.subscribe !== 'function') {\n        throw new Error(`'${name}' is not a store with a 'subscribe' method`);\n    }\n}\nfunction subscribe(store, ...callbacks) {\n    if (store == null) {\n        return noop;\n    }\n    const unsub = store.subscribe(...callbacks);\n    return unsub.unsubscribe ? () => unsub.unsubscribe() : unsub;\n}\nfunction get_store_value(store) {\n    let value;\n    subscribe(store, _ => value = _)();\n    return value;\n}\nfunction component_subscribe(component, store, callback) {\n    component.$$.on_destroy.push(subscribe(store, callback));\n}\nfunction create_slot(definition, ctx, $$scope, fn) {\n    if (definition) {\n        const slot_ctx = get_slot_context(definition, ctx, $$scope, fn);\n        return definition[0](slot_ctx);\n    }\n}\nfunction get_slot_context(definition, ctx, $$scope, fn) {\n    return definition[1] && fn\n        ? assign($$scope.ctx.slice(), definition[1](fn(ctx)))\n        : $$scope.ctx;\n}\nfunction get_slot_changes(definition, $$scope, dirty, fn) {\n    if (definition[2] && fn) {\n        const lets = definition[2](fn(dirty));\n        if ($$scope.dirty === undefined) {\n            return lets;\n        }\n        if (typeof lets === 'object') {\n            const merged = [];\n            const len = Math.max($$scope.dirty.length, lets.length);\n            for (let i = 0; i < len; i += 1) {\n                merged[i] = $$scope.dirty[i] | lets[i];\n            }\n            return merged;\n        }\n        return $$scope.dirty | lets;\n    }\n    return $$scope.dirty;\n}\nfunction update_slot(slot, slot_definition, ctx, $$scope, dirty, get_slot_changes_fn, get_slot_context_fn) {\n    const slot_changes = get_slot_changes(slot_definition, $$scope, dirty, get_slot_changes_fn);\n    if (slot_changes) {\n        const slot_context = get_slot_context(slot_definition, ctx, $$scope, get_slot_context_fn);\n        slot.p(slot_context, slot_changes);\n    }\n}\nfunction exclude_internal_props(props) {\n    const result = {};\n    for (const k in props)\n        if (k[0] !== '$')\n            result[k] = props[k];\n    return result;\n}\nfunction compute_rest_props(props, keys) {\n    const rest = {};\n    keys = new Set(keys);\n    for (const k in props)\n        if (!keys.has(k) && k[0] !== '$')\n            rest[k] = props[k];\n    return rest;\n}\nfunction compute_slots(slots) {\n    const result = {};\n    for (const key in slots) {\n        result[key] = true;\n    }\n    return result;\n}\nfunction once(fn) {\n    let ran = false;\n    return function (...args) {\n        if (ran)\n            return;\n        ran = true;\n        fn.call(this, ...args);\n    };\n}\nfunction null_to_empty(value) {\n    return value == null ? '' : value;\n}\nfunction set_store_value(store, ret, value = ret) {\n    store.set(value);\n    return ret;\n}\nconst has_prop = (obj, prop) => Object.prototype.hasOwnProperty.call(obj, prop);\nfunction action_destroyer(action_result) {\n    return action_result && is_function(action_result.destroy) ? action_result.destroy : noop;\n}\n\nconst is_client = typeof window !== 'undefined';\nlet now = is_client\n    ? () => window.performance.now()\n    : () => Date.now();\nlet raf = is_client ? cb => requestAnimationFrame(cb) : noop;\n// used internally for testing\nfunction set_now(fn) {\n    now = fn;\n}\nfunction set_raf(fn) {\n    raf = fn;\n}\n\nconst tasks = new Set();\nfunction run_tasks(now) {\n    tasks.forEach(task => {\n        if (!task.c(now)) {\n            tasks.delete(task);\n            task.f();\n        }\n    });\n    if (tasks.size !== 0)\n        raf(run_tasks);\n}\n/**\n * For testing purposes only!\n */\nfunction clear_loops() {\n    tasks.clear();\n}\n/**\n * Creates a new task that runs on each raf frame\n * until it returns a falsy value or is aborted\n */\nfunction loop(callback) {\n    let task;\n    if (tasks.size === 0)\n        raf(run_tasks);\n    return {\n        promise: new Promise(fulfill => {\n            tasks.add(task = { c: callback, f: fulfill });\n        }),\n        abort() {\n            tasks.delete(task);\n        }\n    };\n}\n\nfunction append(target, node) {\n    target.appendChild(node);\n}\nfunction insert(target, node, anchor) {\n    target.insertBefore(node, anchor || null);\n}\nfunction detach(node) {\n    node.parentNode.removeChild(node);\n}\nfunction destroy_each(iterations, detaching) {\n    for (let i = 0; i < iterations.length; i += 1) {\n        if (iterations[i])\n            iterations[i].d(detaching);\n    }\n}\nfunction element(name) {\n    return document.createElement(name);\n}\nfunction element_is(name, is) {\n    return document.createElement(name, { is });\n}\nfunction object_without_properties(obj, exclude) {\n    const target = {};\n    for (const k in obj) {\n        if (has_prop(obj, k)\n            // @ts-ignore\n            && exclude.indexOf(k) === -1) {\n            // @ts-ignore\n            target[k] = obj[k];\n        }\n    }\n    return target;\n}\nfunction svg_element(name) {\n    return document.createElementNS('http://www.w3.org/2000/svg', name);\n}\nfunction text(data) {\n    return document.createTextNode(data);\n}\nfunction space() {\n    return text(' ');\n}\nfunction empty() {\n    return text('');\n}\nfunction listen(node, event, handler, options) {\n    node.addEventListener(event, handler, options);\n    return () => node.removeEventListener(event, handler, options);\n}\nfunction prevent_default(fn) {\n    return function (event) {\n        event.preventDefault();\n        // @ts-ignore\n        return fn.call(this, event);\n    };\n}\nfunction stop_propagation(fn) {\n    return function (event) {\n        event.stopPropagation();\n        // @ts-ignore\n        return fn.call(this, event);\n    };\n}\nfunction self(fn) {\n    return function (event) {\n        // @ts-ignore\n        if (event.target === this)\n            fn.call(this, event);\n    };\n}\nfunction attr(node, attribute, value) {\n    if (value == null)\n        node.removeAttribute(attribute);\n    else if (node.getAttribute(attribute) !== value)\n        node.setAttribute(attribute, value);\n}\nfunction set_attributes(node, attributes) {\n    // @ts-ignore\n    const descriptors = Object.getOwnPropertyDescriptors(node.__proto__);\n    for (const key in attributes) {\n        if (attributes[key] == null) {\n            node.removeAttribute(key);\n        }\n        else if (key === 'style') {\n            node.style.cssText = attributes[key];\n        }\n        else if (key === '__value') {\n            node.value = node[key] = attributes[key];\n        }\n        else if (descriptors[key] && descriptors[key].set) {\n            node[key] = attributes[key];\n        }\n        else {\n            attr(node, key, attributes[key]);\n        }\n    }\n}\nfunction set_svg_attributes(node, attributes) {\n    for (const key in attributes) {\n        attr(node, key, attributes[key]);\n    }\n}\nfunction set_custom_element_data(node, prop, value) {\n    if (prop in node) {\n        node[prop] = value;\n    }\n    else {\n        attr(node, prop, value);\n    }\n}\nfunction xlink_attr(node, attribute, value) {\n    node.setAttributeNS('http://www.w3.org/1999/xlink', attribute, value);\n}\nfunction get_binding_group_value(group, __value, checked) {\n    const value = new Set();\n    for (let i = 0; i < group.length; i += 1) {\n        if (group[i].checked)\n            value.add(group[i].__value);\n    }\n    if (!checked) {\n        value.delete(__value);\n    }\n    return Array.from(value);\n}\nfunction to_number(value) {\n    return value === '' ? null : +value;\n}\nfunction time_ranges_to_array(ranges) {\n    const array = [];\n    for (let i = 0; i < ranges.length; i += 1) {\n        array.push({ start: ranges.start(i), end: ranges.end(i) });\n    }\n    return array;\n}\nfunction children(element) {\n    return Array.from(element.childNodes);\n}\nfunction claim_element(nodes, name, attributes, svg) {\n    for (let i = 0; i < nodes.length; i += 1) {\n        const node = nodes[i];\n        if (node.nodeName === name) {\n            let j = 0;\n            const remove = [];\n            while (j < node.attributes.length) {\n                const attribute = node.attributes[j++];\n                if (!attributes[attribute.name]) {\n                    remove.push(attribute.name);\n                }\n            }\n            for (let k = 0; k < remove.length; k++) {\n                node.removeAttribute(remove[k]);\n            }\n            return nodes.splice(i, 1)[0];\n        }\n    }\n    return svg ? svg_element(name) : element(name);\n}\nfunction claim_text(nodes, data) {\n    for (let i = 0; i < nodes.length; i += 1) {\n        const node = nodes[i];\n        if (node.nodeType === 3) {\n            node.data = '' + data;\n            return nodes.splice(i, 1)[0];\n        }\n    }\n    return text(data);\n}\nfunction claim_space(nodes) {\n    return claim_text(nodes, ' ');\n}\nfunction set_data(text, data) {\n    data = '' + data;\n    if (text.wholeText !== data)\n        text.data = data;\n}\nfunction set_input_value(input, value) {\n    input.value = value == null ? '' : value;\n}\nfunction set_input_type(input, type) {\n    try {\n        input.type = type;\n    }\n    catch (e) {\n        // do nothing\n    }\n}\nfunction set_style(node, key, value, important) {\n    node.style.setProperty(key, value, important ? 'important' : '');\n}\nfunction select_option(select, value) {\n    for (let i = 0; i < select.options.length; i += 1) {\n        const option = select.options[i];\n        if (option.__value === value) {\n            option.selected = true;\n            return;\n        }\n    }\n}\nfunction select_options(select, value) {\n    for (let i = 0; i < select.options.length; i += 1) {\n        const option = select.options[i];\n        option.selected = ~value.indexOf(option.__value);\n    }\n}\nfunction select_value(select) {\n    const selected_option = select.querySelector(':checked') || select.options[0];\n    return selected_option && selected_option.__value;\n}\nfunction select_multiple_value(select) {\n    return [].map.call(select.querySelectorAll(':checked'), option => option.__value);\n}\n// unfortunately this can't be a constant as that wouldn't be tree-shakeable\n// so we cache the result instead\nlet crossorigin;\nfunction is_crossorigin() {\n    if (crossorigin === undefined) {\n        crossorigin = false;\n        try {\n            if (typeof window !== 'undefined' && window.parent) {\n                void window.parent.document;\n            }\n        }\n        catch (error) {\n            crossorigin = true;\n        }\n    }\n    return crossorigin;\n}\nfunction add_resize_listener(node, fn) {\n    const computed_style = getComputedStyle(node);\n    const z_index = (parseInt(computed_style.zIndex) || 0) - 1;\n    if (computed_style.position === 'static') {\n        node.style.position = 'relative';\n    }\n    const iframe = element('iframe');\n    iframe.setAttribute('style', `display: block; position: absolute; top: 0; left: 0; width: 100%; height: 100%; ` +\n        `overflow: hidden; border: 0; opacity: 0; pointer-events: none; z-index: ${z_index};`);\n    iframe.setAttribute('aria-hidden', 'true');\n    iframe.tabIndex = -1;\n    const crossorigin = is_crossorigin();\n    let unsubscribe;\n    if (crossorigin) {\n        iframe.src = `data:text/html,<script>onresize=function(){parent.postMessage(0,'*')}</script>`;\n        unsubscribe = listen(window, 'message', (event) => {\n            if (event.source === iframe.contentWindow)\n                fn();\n        });\n    }\n    else {\n        iframe.src = 'about:blank';\n        iframe.onload = () => {\n            unsubscribe = listen(iframe.contentWindow, 'resize', fn);\n        };\n    }\n    append(node, iframe);\n    return () => {\n        if (crossorigin) {\n            unsubscribe();\n        }\n        else if (unsubscribe && iframe.contentWindow) {\n            unsubscribe();\n        }\n        detach(iframe);\n    };\n}\nfunction toggle_class(element, name, toggle) {\n    element.classList[toggle ? 'add' : 'remove'](name);\n}\nfunction custom_event(type, detail) {\n    const e = document.createEvent('CustomEvent');\n    e.initCustomEvent(type, false, false, detail);\n    return e;\n}\nfunction query_selector_all(selector, parent = document.body) {\n    return Array.from(parent.querySelectorAll(selector));\n}\nclass HtmlTag {\n    constructor(anchor = null) {\n        this.a = anchor;\n        this.e = this.n = null;\n    }\n    m(html, target, anchor = null) {\n        if (!this.e) {\n            this.e = element(target.nodeName);\n            this.t = target;\n            this.h(html);\n        }\n        this.i(anchor);\n    }\n    h(html) {\n        this.e.innerHTML = html;\n        this.n = Array.from(this.e.childNodes);\n    }\n    i(anchor) {\n        for (let i = 0; i < this.n.length; i += 1) {\n            insert(this.t, this.n[i], anchor);\n        }\n    }\n    p(html) {\n        this.d();\n        this.h(html);\n        this.i(this.a);\n    }\n    d() {\n        this.n.forEach(detach);\n    }\n}\n\nconst active_docs = new Set();\nlet active = 0;\n// https://github.com/darkskyapp/string-hash/blob/master/index.js\nfunction hash(str) {\n    let hash = 5381;\n    let i = str.length;\n    while (i--)\n        hash = ((hash << 5) - hash) ^ str.charCodeAt(i);\n    return hash >>> 0;\n}\nfunction create_rule(node, a, b, duration, delay, ease, fn, uid = 0) {\n    const step = 16.666 / duration;\n    let keyframes = '{\\n';\n    for (let p = 0; p <= 1; p += step) {\n        const t = a + (b - a) * ease(p);\n        keyframes += p * 100 + `%{${fn(t, 1 - t)}}\\n`;\n    }\n    const rule = keyframes + `100% {${fn(b, 1 - b)}}\\n}`;\n    const name = `__svelte_${hash(rule)}_${uid}`;\n    const doc = node.ownerDocument;\n    active_docs.add(doc);\n    const stylesheet = doc.__svelte_stylesheet || (doc.__svelte_stylesheet = doc.head.appendChild(element('style')).sheet);\n    const current_rules = doc.__svelte_rules || (doc.__svelte_rules = {});\n    if (!current_rules[name]) {\n        current_rules[name] = true;\n        stylesheet.insertRule(`@keyframes ${name} ${rule}`, stylesheet.cssRules.length);\n    }\n    const animation = node.style.animation || '';\n    node.style.animation = `${animation ? `${animation}, ` : ``}${name} ${duration}ms linear ${delay}ms 1 both`;\n    active += 1;\n    return name;\n}\nfunction delete_rule(node, name) {\n    const previous = (node.style.animation || '').split(', ');\n    const next = previous.filter(name\n        ? anim => anim.indexOf(name) < 0 // remove specific animation\n        : anim => anim.indexOf('__svelte') === -1 // remove all Svelte animations\n    );\n    const deleted = previous.length - next.length;\n    if (deleted) {\n        node.style.animation = next.join(', ');\n        active -= deleted;\n        if (!active)\n            clear_rules();\n    }\n}\nfunction clear_rules() {\n    raf(() => {\n        if (active)\n            return;\n        active_docs.forEach(doc => {\n            const stylesheet = doc.__svelte_stylesheet;\n            let i = stylesheet.cssRules.length;\n            while (i--)\n                stylesheet.deleteRule(i);\n            doc.__svelte_rules = {};\n        });\n        active_docs.clear();\n    });\n}\n\nfunction create_animation(node, from, fn, params) {\n    if (!from)\n        return noop;\n    const to = node.getBoundingClientRect();\n    if (from.left === to.left && from.right === to.right && from.top === to.top && from.bottom === to.bottom)\n        return noop;\n    const { delay = 0, duration = 300, easing = identity, \n    // @ts-ignore todo: should this be separated from destructuring? Or start/end added to public api and documentation?\n    start: start_time = now() + delay, \n    // @ts-ignore todo:\n    end = start_time + duration, tick = noop, css } = fn(node, { from, to }, params);\n    let running = true;\n    let started = false;\n    let name;\n    function start() {\n        if (css) {\n            name = create_rule(node, 0, 1, duration, delay, easing, css);\n        }\n        if (!delay) {\n            started = true;\n        }\n    }\n    function stop() {\n        if (css)\n            delete_rule(node, name);\n        running = false;\n    }\n    loop(now => {\n        if (!started && now >= start_time) {\n            started = true;\n        }\n        if (started && now >= end) {\n            tick(1, 0);\n            stop();\n        }\n        if (!running) {\n            return false;\n        }\n        if (started) {\n            const p = now - start_time;\n            const t = 0 + 1 * easing(p / duration);\n            tick(t, 1 - t);\n        }\n        return true;\n    });\n    start();\n    tick(0, 1);\n    return stop;\n}\nfunction fix_position(node) {\n    const style = getComputedStyle(node);\n    if (style.position !== 'absolute' && style.position !== 'fixed') {\n        const { width, height } = style;\n        const a = node.getBoundingClientRect();\n        node.style.position = 'absolute';\n        node.style.width = width;\n        node.style.height = height;\n        add_transform(node, a);\n    }\n}\nfunction add_transform(node, a) {\n    const b = node.getBoundingClientRect();\n    if (a.left !== b.left || a.top !== b.top) {\n        const style = getComputedStyle(node);\n        const transform = style.transform === 'none' ? '' : style.transform;\n        node.style.transform = `${transform} translate(${a.left - b.left}px, ${a.top - b.top}px)`;\n    }\n}\n\nlet current_component;\nfunction set_current_component(component) {\n    current_component = component;\n}\nfunction get_current_component() {\n    if (!current_component)\n        throw new Error(`Function called outside component initialization`);\n    return current_component;\n}\nfunction beforeUpdate(fn) {\n    get_current_component().$$.before_update.push(fn);\n}\nfunction onMount(fn) {\n    get_current_component().$$.on_mount.push(fn);\n}\nfunction afterUpdate(fn) {\n    get_current_component().$$.after_update.push(fn);\n}\nfunction onDestroy(fn) {\n    get_current_component().$$.on_destroy.push(fn);\n}\nfunction createEventDispatcher() {\n    const component = get_current_component();\n    return (type, detail) => {\n        const callbacks = component.$$.callbacks[type];\n        if (callbacks) {\n            // TODO are there situations where events could be dispatched\n            // in a server (non-DOM) environment?\n            const event = custom_event(type, detail);\n            callbacks.slice().forEach(fn => {\n                fn.call(component, event);\n            });\n        }\n    };\n}\nfunction setContext(key, context) {\n    get_current_component().$$.context.set(key, context);\n}\nfunction getContext(key) {\n    return get_current_component().$$.context.get(key);\n}\n// TODO figure out if we still want to support\n// shorthand events, or if we want to implement\n// a real bubbling mechanism\nfunction bubble(component, event) {\n    const callbacks = component.$$.callbacks[event.type];\n    if (callbacks) {\n        callbacks.slice().forEach(fn => fn(event));\n    }\n}\n\nconst dirty_components = [];\nconst intros = { enabled: false };\nconst binding_callbacks = [];\nconst render_callbacks = [];\nconst flush_callbacks = [];\nconst resolved_promise = Promise.resolve();\nlet update_scheduled = false;\nfunction schedule_update() {\n    if (!update_scheduled) {\n        update_scheduled = true;\n        resolved_promise.then(flush);\n    }\n}\nfunction tick() {\n    schedule_update();\n    return resolved_promise;\n}\nfunction add_render_callback(fn) {\n    render_callbacks.push(fn);\n}\nfunction add_flush_callback(fn) {\n    flush_callbacks.push(fn);\n}\nlet flushing = false;\nconst seen_callbacks = new Set();\nfunction flush() {\n    if (flushing)\n        return;\n    flushing = true;\n    do {\n        // first, call beforeUpdate functions\n        // and update components\n        for (let i = 0; i < dirty_components.length; i += 1) {\n            const component = dirty_components[i];\n            set_current_component(component);\n            update(component.$$);\n        }\n        set_current_component(null);\n        dirty_components.length = 0;\n        while (binding_callbacks.length)\n            binding_callbacks.pop()();\n        // then, once components are updated, call\n        // afterUpdate functions. This may cause\n        // subsequent updates...\n        for (let i = 0; i < render_callbacks.length; i += 1) {\n            const callback = render_callbacks[i];\n            if (!seen_callbacks.has(callback)) {\n                // ...so guard against infinite loops\n                seen_callbacks.add(callback);\n                callback();\n            }\n        }\n        render_callbacks.length = 0;\n    } while (dirty_components.length);\n    while (flush_callbacks.length) {\n        flush_callbacks.pop()();\n    }\n    update_scheduled = false;\n    flushing = false;\n    seen_callbacks.clear();\n}\nfunction update($$) {\n    if ($$.fragment !== null) {\n        $$.update();\n        run_all($$.before_update);\n        const dirty = $$.dirty;\n        $$.dirty = [-1];\n        $$.fragment && $$.fragment.p($$.ctx, dirty);\n        $$.after_update.forEach(add_render_callback);\n    }\n}\n\nlet promise;\nfunction wait() {\n    if (!promise) {\n        promise = Promise.resolve();\n        promise.then(() => {\n            promise = null;\n        });\n    }\n    return promise;\n}\nfunction dispatch(node, direction, kind) {\n    node.dispatchEvent(custom_event(`${direction ? 'intro' : 'outro'}${kind}`));\n}\nconst outroing = new Set();\nlet outros;\nfunction group_outros() {\n    outros = {\n        r: 0,\n        c: [],\n        p: outros // parent group\n    };\n}\nfunction check_outros() {\n    if (!outros.r) {\n        run_all(outros.c);\n    }\n    outros = outros.p;\n}\nfunction transition_in(block, local) {\n    if (block && block.i) {\n        outroing.delete(block);\n        block.i(local);\n    }\n}\nfunction transition_out(block, local, detach, callback) {\n    if (block && block.o) {\n        if (outroing.has(block))\n            return;\n        outroing.add(block);\n        outros.c.push(() => {\n            outroing.delete(block);\n            if (callback) {\n                if (detach)\n                    block.d(1);\n                callback();\n            }\n        });\n        block.o(local);\n    }\n}\nconst null_transition = { duration: 0 };\nfunction create_in_transition(node, fn, params) {\n    let config = fn(node, params);\n    let running = false;\n    let animation_name;\n    let task;\n    let uid = 0;\n    function cleanup() {\n        if (animation_name)\n            delete_rule(node, animation_name);\n    }\n    function go() {\n        const { delay = 0, duration = 300, easing = identity, tick = noop, css } = config || null_transition;\n        if (css)\n            animation_name = create_rule(node, 0, 1, duration, delay, easing, css, uid++);\n        tick(0, 1);\n        const start_time = now() + delay;\n        const end_time = start_time + duration;\n        if (task)\n            task.abort();\n        running = true;\n        add_render_callback(() => dispatch(node, true, 'start'));\n        task = loop(now => {\n            if (running) {\n                if (now >= end_time) {\n                    tick(1, 0);\n                    dispatch(node, true, 'end');\n                    cleanup();\n                    return running = false;\n                }\n                if (now >= start_time) {\n                    const t = easing((now - start_time) / duration);\n                    tick(t, 1 - t);\n                }\n            }\n            return running;\n        });\n    }\n    let started = false;\n    return {\n        start() {\n            if (started)\n                return;\n            delete_rule(node);\n            if (is_function(config)) {\n                config = config();\n                wait().then(go);\n            }\n            else {\n                go();\n            }\n        },\n        invalidate() {\n            started = false;\n        },\n        end() {\n            if (running) {\n                cleanup();\n                running = false;\n            }\n        }\n    };\n}\nfunction create_out_transition(node, fn, params) {\n    let config = fn(node, params);\n    let running = true;\n    let animation_name;\n    const group = outros;\n    group.r += 1;\n    function go() {\n        const { delay = 0, duration = 300, easing = identity, tick = noop, css } = config || null_transition;\n        if (css)\n            animation_name = create_rule(node, 1, 0, duration, delay, easing, css);\n        const start_time = now() + delay;\n        const end_time = start_time + duration;\n        add_render_callback(() => dispatch(node, false, 'start'));\n        loop(now => {\n            if (running) {\n                if (now >= end_time) {\n                    tick(0, 1);\n                    dispatch(node, false, 'end');\n                    if (!--group.r) {\n                        // this will result in `end()` being called,\n                        // so we don't need to clean up here\n                        run_all(group.c);\n                    }\n                    return false;\n                }\n                if (now >= start_time) {\n                    const t = easing((now - start_time) / duration);\n                    tick(1 - t, t);\n                }\n            }\n            return running;\n        });\n    }\n    if (is_function(config)) {\n        wait().then(() => {\n            // @ts-ignore\n            config = config();\n            go();\n        });\n    }\n    else {\n        go();\n    }\n    return {\n        end(reset) {\n            if (reset && config.tick) {\n                config.tick(1, 0);\n            }\n            if (running) {\n                if (animation_name)\n                    delete_rule(node, animation_name);\n                running = false;\n            }\n        }\n    };\n}\nfunction create_bidirectional_transition(node, fn, params, intro) {\n    let config = fn(node, params);\n    let t = intro ? 0 : 1;\n    let running_program = null;\n    let pending_program = null;\n    let animation_name = null;\n    function clear_animation() {\n        if (animation_name)\n            delete_rule(node, animation_name);\n    }\n    function init(program, duration) {\n        const d = program.b - t;\n        duration *= Math.abs(d);\n        return {\n            a: t,\n            b: program.b,\n            d,\n            duration,\n            start: program.start,\n            end: program.start + duration,\n            group: program.group\n        };\n    }\n    function go(b) {\n        const { delay = 0, duration = 300, easing = identity, tick = noop, css } = config || null_transition;\n        const program = {\n            start: now() + delay,\n            b\n        };\n        if (!b) {\n            // @ts-ignore todo: improve typings\n            program.group = outros;\n            outros.r += 1;\n        }\n        if (running_program || pending_program) {\n            pending_program = program;\n        }\n        else {\n            // if this is an intro, and there's a delay, we need to do\n            // an initial tick and/or apply CSS animation immediately\n            if (css) {\n                clear_animation();\n                animation_name = create_rule(node, t, b, duration, delay, easing, css);\n            }\n            if (b)\n                tick(0, 1);\n            running_program = init(program, duration);\n            add_render_callback(() => dispatch(node, b, 'start'));\n            loop(now => {\n                if (pending_program && now > pending_program.start) {\n                    running_program = init(pending_program, duration);\n                    pending_program = null;\n                    dispatch(node, running_program.b, 'start');\n                    if (css) {\n                        clear_animation();\n                        animation_name = create_rule(node, t, running_program.b, running_program.duration, 0, easing, config.css);\n                    }\n                }\n                if (running_program) {\n                    if (now >= running_program.end) {\n                        tick(t = running_program.b, 1 - t);\n                        dispatch(node, running_program.b, 'end');\n                        if (!pending_program) {\n                            // we're done\n                            if (running_program.b) {\n                                // intro — we can tidy up immediately\n                                clear_animation();\n                            }\n                            else {\n                                // outro — needs to be coordinated\n                                if (!--running_program.group.r)\n                                    run_all(running_program.group.c);\n                            }\n                        }\n                        running_program = null;\n                    }\n                    else if (now >= running_program.start) {\n                        const p = now - running_program.start;\n                        t = running_program.a + running_program.d * easing(p / running_program.duration);\n                        tick(t, 1 - t);\n                    }\n                }\n                return !!(running_program || pending_program);\n            });\n        }\n    }\n    return {\n        run(b) {\n            if (is_function(config)) {\n                wait().then(() => {\n                    // @ts-ignore\n                    config = config();\n                    go(b);\n                });\n            }\n            else {\n                go(b);\n            }\n        },\n        end() {\n            clear_animation();\n            running_program = pending_program = null;\n        }\n    };\n}\n\nfunction handle_promise(promise, info) {\n    const token = info.token = {};\n    function update(type, index, key, value) {\n        if (info.token !== token)\n            return;\n        info.resolved = value;\n        let child_ctx = info.ctx;\n        if (key !== undefined) {\n            child_ctx = child_ctx.slice();\n            child_ctx[key] = value;\n        }\n        const block = type && (info.current = type)(child_ctx);\n        let needs_flush = false;\n        if (info.block) {\n            if (info.blocks) {\n                info.blocks.forEach((block, i) => {\n                    if (i !== index && block) {\n                        group_outros();\n                        transition_out(block, 1, 1, () => {\n                            info.blocks[i] = null;\n                        });\n                        check_outros();\n                    }\n                });\n            }\n            else {\n                info.block.d(1);\n            }\n            block.c();\n            transition_in(block, 1);\n            block.m(info.mount(), info.anchor);\n            needs_flush = true;\n        }\n        info.block = block;\n        if (info.blocks)\n            info.blocks[index] = block;\n        if (needs_flush) {\n            flush();\n        }\n    }\n    if (is_promise(promise)) {\n        const current_component = get_current_component();\n        promise.then(value => {\n            set_current_component(current_component);\n            update(info.then, 1, info.value, value);\n            set_current_component(null);\n        }, error => {\n            set_current_component(current_component);\n            update(info.catch, 2, info.error, error);\n            set_current_component(null);\n            if (!info.hasCatch) {\n                throw error;\n            }\n        });\n        // if we previously had a then/catch block, destroy it\n        if (info.current !== info.pending) {\n            update(info.pending, 0);\n            return true;\n        }\n    }\n    else {\n        if (info.current !== info.then) {\n            update(info.then, 1, info.value, promise);\n            return true;\n        }\n        info.resolved = promise;\n    }\n}\n\nconst globals = (typeof window !== 'undefined'\n    ? window\n    : typeof globalThis !== 'undefined'\n        ? globalThis\n        : global);\n\nfunction destroy_block(block, lookup) {\n    block.d(1);\n    lookup.delete(block.key);\n}\nfunction outro_and_destroy_block(block, lookup) {\n    transition_out(block, 1, 1, () => {\n        lookup.delete(block.key);\n    });\n}\nfunction fix_and_destroy_block(block, lookup) {\n    block.f();\n    destroy_block(block, lookup);\n}\nfunction fix_and_outro_and_destroy_block(block, lookup) {\n    block.f();\n    outro_and_destroy_block(block, lookup);\n}\nfunction update_keyed_each(old_blocks, dirty, get_key, dynamic, ctx, list, lookup, node, destroy, create_each_block, next, get_context) {\n    let o = old_blocks.length;\n    let n = list.length;\n    let i = o;\n    const old_indexes = {};\n    while (i--)\n        old_indexes[old_blocks[i].key] = i;\n    const new_blocks = [];\n    const new_lookup = new Map();\n    const deltas = new Map();\n    i = n;\n    while (i--) {\n        const child_ctx = get_context(ctx, list, i);\n        const key = get_key(child_ctx);\n        let block = lookup.get(key);\n        if (!block) {\n            block = create_each_block(key, child_ctx);\n            block.c();\n        }\n        else if (dynamic) {\n            block.p(child_ctx, dirty);\n        }\n        new_lookup.set(key, new_blocks[i] = block);\n        if (key in old_indexes)\n            deltas.set(key, Math.abs(i - old_indexes[key]));\n    }\n    const will_move = new Set();\n    const did_move = new Set();\n    function insert(block) {\n        transition_in(block, 1);\n        block.m(node, next);\n        lookup.set(block.key, block);\n        next = block.first;\n        n--;\n    }\n    while (o && n) {\n        const new_block = new_blocks[n - 1];\n        const old_block = old_blocks[o - 1];\n        const new_key = new_block.key;\n        const old_key = old_block.key;\n        if (new_block === old_block) {\n            // do nothing\n            next = new_block.first;\n            o--;\n            n--;\n        }\n        else if (!new_lookup.has(old_key)) {\n            // remove old block\n            destroy(old_block, lookup);\n            o--;\n        }\n        else if (!lookup.has(new_key) || will_move.has(new_key)) {\n            insert(new_block);\n        }\n        else if (did_move.has(old_key)) {\n            o--;\n        }\n        else if (deltas.get(new_key) > deltas.get(old_key)) {\n            did_move.add(new_key);\n            insert(new_block);\n        }\n        else {\n            will_move.add(old_key);\n            o--;\n        }\n    }\n    while (o--) {\n        const old_block = old_blocks[o];\n        if (!new_lookup.has(old_block.key))\n            destroy(old_block, lookup);\n    }\n    while (n)\n        insert(new_blocks[n - 1]);\n    return new_blocks;\n}\nfunction validate_each_keys(ctx, list, get_context, get_key) {\n    const keys = new Set();\n    for (let i = 0; i < list.length; i++) {\n        const key = get_key(get_context(ctx, list, i));\n        if (keys.has(key)) {\n            throw new Error(`Cannot have duplicate keys in a keyed each`);\n        }\n        keys.add(key);\n    }\n}\n\nfunction get_spread_update(levels, updates) {\n    const update = {};\n    const to_null_out = {};\n    const accounted_for = { $$scope: 1 };\n    let i = levels.length;\n    while (i--) {\n        const o = levels[i];\n        const n = updates[i];\n        if (n) {\n            for (const key in o) {\n                if (!(key in n))\n                    to_null_out[key] = 1;\n            }\n            for (const key in n) {\n                if (!accounted_for[key]) {\n                    update[key] = n[key];\n                    accounted_for[key] = 1;\n                }\n            }\n            levels[i] = n;\n        }\n        else {\n            for (const key in o) {\n                accounted_for[key] = 1;\n            }\n        }\n    }\n    for (const key in to_null_out) {\n        if (!(key in update))\n            update[key] = undefined;\n    }\n    return update;\n}\nfunction get_spread_object(spread_props) {\n    return typeof spread_props === 'object' && spread_props !== null ? spread_props : {};\n}\n\n// source: https://html.spec.whatwg.org/multipage/indices.html\nconst boolean_attributes = new Set([\n    'allowfullscreen',\n    'allowpaymentrequest',\n    'async',\n    'autofocus',\n    'autoplay',\n    'checked',\n    'controls',\n    'default',\n    'defer',\n    'disabled',\n    'formnovalidate',\n    'hidden',\n    'ismap',\n    'loop',\n    'multiple',\n    'muted',\n    'nomodule',\n    'novalidate',\n    'open',\n    'playsinline',\n    'readonly',\n    'required',\n    'reversed',\n    'selected'\n]);\n\nconst invalid_attribute_name_character = /[\\s'\">/=\\u{FDD0}-\\u{FDEF}\\u{FFFE}\\u{FFFF}\\u{1FFFE}\\u{1FFFF}\\u{2FFFE}\\u{2FFFF}\\u{3FFFE}\\u{3FFFF}\\u{4FFFE}\\u{4FFFF}\\u{5FFFE}\\u{5FFFF}\\u{6FFFE}\\u{6FFFF}\\u{7FFFE}\\u{7FFFF}\\u{8FFFE}\\u{8FFFF}\\u{9FFFE}\\u{9FFFF}\\u{AFFFE}\\u{AFFFF}\\u{BFFFE}\\u{BFFFF}\\u{CFFFE}\\u{CFFFF}\\u{DFFFE}\\u{DFFFF}\\u{EFFFE}\\u{EFFFF}\\u{FFFFE}\\u{FFFFF}\\u{10FFFE}\\u{10FFFF}]/u;\n// https://html.spec.whatwg.org/multipage/syntax.html#attributes-2\n// https://infra.spec.whatwg.org/#noncharacter\nfunction spread(args, classes_to_add) {\n    const attributes = Object.assign({}, ...args);\n    if (classes_to_add) {\n        if (attributes.class == null) {\n            attributes.class = classes_to_add;\n        }\n        else {\n            attributes.class += ' ' + classes_to_add;\n        }\n    }\n    let str = '';\n    Object.keys(attributes).forEach(name => {\n        if (invalid_attribute_name_character.test(name))\n            return;\n        const value = attributes[name];\n        if (value === true)\n            str += \" \" + name;\n        else if (boolean_attributes.has(name.toLowerCase())) {\n            if (value)\n                str += \" \" + name;\n        }\n        else if (value != null) {\n            str += ` ${name}=\"${String(value).replace(/\"/g, '&#34;').replace(/'/g, '&#39;')}\"`;\n        }\n    });\n    return str;\n}\nconst escaped = {\n    '\"': '&quot;',\n    \"'\": '&#39;',\n    '&': '&amp;',\n    '<': '&lt;',\n    '>': '&gt;'\n};\nfunction escape(html) {\n    return String(html).replace(/[\"'&<>]/g, match => escaped[match]);\n}\nfunction each(items, fn) {\n    let str = '';\n    for (let i = 0; i < items.length; i += 1) {\n        str += fn(items[i], i);\n    }\n    return str;\n}\nconst missing_component = {\n    $$render: () => ''\n};\nfunction validate_component(component, name) {\n    if (!component || !component.$$render) {\n        if (name === 'svelte:component')\n            name += ' this={...}';\n        throw new Error(`<${name}> is not a valid SSR component. You may need to review your build config to ensure that dependencies are compiled, rather than imported as pre-compiled modules`);\n    }\n    return component;\n}\nfunction debug(file, line, column, values) {\n    console.log(`{@debug} ${file ? file + ' ' : ''}(${line}:${column})`); // eslint-disable-line no-console\n    console.log(values); // eslint-disable-line no-console\n    return '';\n}\nlet on_destroy;\nfunction create_ssr_component(fn) {\n    function $$render(result, props, bindings, slots) {\n        const parent_component = current_component;\n        const $$ = {\n            on_destroy,\n            context: new Map(parent_component ? parent_component.$$.context : []),\n            // these will be immediately discarded\n            on_mount: [],\n            before_update: [],\n            after_update: [],\n            callbacks: blank_object()\n        };\n        set_current_component({ $$ });\n        const html = fn(result, props, bindings, slots);\n        set_current_component(parent_component);\n        return html;\n    }\n    return {\n        render: (props = {}, options = {}) => {\n            on_destroy = [];\n            const result = { title: '', head: '', css: new Set() };\n            const html = $$render(result, props, {}, options);\n            run_all(on_destroy);\n            return {\n                html,\n                css: {\n                    code: Array.from(result.css).map(css => css.code).join('\\n'),\n                    map: null // TODO\n                },\n                head: result.title + result.head\n            };\n        },\n        $$render\n    };\n}\nfunction add_attribute(name, value, boolean) {\n    if (value == null || (boolean && !value))\n        return '';\n    return ` ${name}${value === true ? '' : `=${typeof value === 'string' ? JSON.stringify(escape(value)) : `\"${value}\"`}`}`;\n}\nfunction add_classes(classes) {\n    return classes ? ` class=\"${classes}\"` : ``;\n}\n\nfunction bind(component, name, callback) {\n    const index = component.$$.props[name];\n    if (index !== undefined) {\n        component.$$.bound[index] = callback;\n        callback(component.$$.ctx[index]);\n    }\n}\nfunction create_component(block) {\n    block && block.c();\n}\nfunction claim_component(block, parent_nodes) {\n    block && block.l(parent_nodes);\n}\nfunction mount_component(component, target, anchor) {\n    const { fragment, on_mount, on_destroy, after_update } = component.$$;\n    fragment && fragment.m(target, anchor);\n    // onMount happens before the initial afterUpdate\n    add_render_callback(() => {\n        const new_on_destroy = on_mount.map(run).filter(is_function);\n        if (on_destroy) {\n            on_destroy.push(...new_on_destroy);\n        }\n        else {\n            // Edge case - component was destroyed immediately,\n            // most likely as a result of a binding initialising\n            run_all(new_on_destroy);\n        }\n        component.$$.on_mount = [];\n    });\n    after_update.forEach(add_render_callback);\n}\nfunction destroy_component(component, detaching) {\n    const $$ = component.$$;\n    if ($$.fragment !== null) {\n        run_all($$.on_destroy);\n        $$.fragment && $$.fragment.d(detaching);\n        // TODO null out other refs, including component.$$ (but need to\n        // preserve final state?)\n        $$.on_destroy = $$.fragment = null;\n        $$.ctx = [];\n    }\n}\nfunction make_dirty(component, i) {\n    if (component.$$.dirty[0] === -1) {\n        dirty_components.push(component);\n        schedule_update();\n        component.$$.dirty.fill(0);\n    }\n    component.$$.dirty[(i / 31) | 0] |= (1 << (i % 31));\n}\nfunction init(component, options, instance, create_fragment, not_equal, props, dirty = [-1]) {\n    const parent_component = current_component;\n    set_current_component(component);\n    const prop_values = options.props || {};\n    const $$ = component.$$ = {\n        fragment: null,\n        ctx: null,\n        // state\n        props,\n        update: noop,\n        not_equal,\n        bound: blank_object(),\n        // lifecycle\n        on_mount: [],\n        on_destroy: [],\n        before_update: [],\n        after_update: [],\n        context: new Map(parent_component ? parent_component.$$.context : []),\n        // everything else\n        callbacks: blank_object(),\n        dirty,\n        skip_bound: false\n    };\n    let ready = false;\n    $$.ctx = instance\n        ? instance(component, prop_values, (i, ret, ...rest) => {\n            const value = rest.length ? rest[0] : ret;\n            if ($$.ctx && not_equal($$.ctx[i], $$.ctx[i] = value)) {\n                if (!$$.skip_bound && $$.bound[i])\n                    $$.bound[i](value);\n                if (ready)\n                    make_dirty(component, i);\n            }\n            return ret;\n        })\n        : [];\n    $$.update();\n    ready = true;\n    run_all($$.before_update);\n    // `false` as a special case of no DOM component\n    $$.fragment = create_fragment ? create_fragment($$.ctx) : false;\n    if (options.target) {\n        if (options.hydrate) {\n            const nodes = children(options.target);\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            $$.fragment && $$.fragment.l(nodes);\n            nodes.forEach(detach);\n        }\n        else {\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            $$.fragment && $$.fragment.c();\n        }\n        if (options.intro)\n            transition_in(component.$$.fragment);\n        mount_component(component, options.target, options.anchor);\n        flush();\n    }\n    set_current_component(parent_component);\n}\nlet SvelteElement;\nif (typeof HTMLElement === 'function') {\n    SvelteElement = class extends HTMLElement {\n        constructor() {\n            super();\n            this.attachShadow({ mode: 'open' });\n        }\n        connectedCallback() {\n            // @ts-ignore todo: improve typings\n            for (const key in this.$$.slotted) {\n                // @ts-ignore todo: improve typings\n                this.appendChild(this.$$.slotted[key]);\n            }\n        }\n        attributeChangedCallback(attr, _oldValue, newValue) {\n            this[attr] = newValue;\n        }\n        $destroy() {\n            destroy_component(this, 1);\n            this.$destroy = noop;\n        }\n        $on(type, callback) {\n            // TODO should this delegate to addEventListener?\n            const callbacks = (this.$$.callbacks[type] || (this.$$.callbacks[type] = []));\n            callbacks.push(callback);\n            return () => {\n                const index = callbacks.indexOf(callback);\n                if (index !== -1)\n                    callbacks.splice(index, 1);\n            };\n        }\n        $set($$props) {\n            if (this.$$set && !is_empty($$props)) {\n                this.$$.skip_bound = true;\n                this.$$set($$props);\n                this.$$.skip_bound = false;\n            }\n        }\n    };\n}\nclass SvelteComponent {\n    $destroy() {\n        destroy_component(this, 1);\n        this.$destroy = noop;\n    }\n    $on(type, callback) {\n        const callbacks = (this.$$.callbacks[type] || (this.$$.callbacks[type] = []));\n        callbacks.push(callback);\n        return () => {\n            const index = callbacks.indexOf(callback);\n            if (index !== -1)\n                callbacks.splice(index, 1);\n        };\n    }\n    $set($$props) {\n        if (this.$$set && !is_empty($$props)) {\n            this.$$.skip_bound = true;\n            this.$$set($$props);\n            this.$$.skip_bound = false;\n        }\n    }\n}\n\nfunction dispatch_dev(type, detail) {\n    document.dispatchEvent(custom_event(type, Object.assign({ version: '3.29.0' }, detail)));\n}\nfunction append_dev(target, node) {\n    dispatch_dev(\"SvelteDOMInsert\", { target, node });\n    append(target, node);\n}\nfunction insert_dev(target, node, anchor) {\n    dispatch_dev(\"SvelteDOMInsert\", { target, node, anchor });\n    insert(target, node, anchor);\n}\nfunction detach_dev(node) {\n    dispatch_dev(\"SvelteDOMRemove\", { node });\n    detach(node);\n}\nfunction detach_between_dev(before, after) {\n    while (before.nextSibling && before.nextSibling !== after) {\n        detach_dev(before.nextSibling);\n    }\n}\nfunction detach_before_dev(after) {\n    while (after.previousSibling) {\n        detach_dev(after.previousSibling);\n    }\n}\nfunction detach_after_dev(before) {\n    while (before.nextSibling) {\n        detach_dev(before.nextSibling);\n    }\n}\nfunction listen_dev(node, event, handler, options, has_prevent_default, has_stop_propagation) {\n    const modifiers = options === true ? [\"capture\"] : options ? Array.from(Object.keys(options)) : [];\n    if (has_prevent_default)\n        modifiers.push('preventDefault');\n    if (has_stop_propagation)\n        modifiers.push('stopPropagation');\n    dispatch_dev(\"SvelteDOMAddEventListener\", { node, event, handler, modifiers });\n    const dispose = listen(node, event, handler, options);\n    return () => {\n        dispatch_dev(\"SvelteDOMRemoveEventListener\", { node, event, handler, modifiers });\n        dispose();\n    };\n}\nfunction attr_dev(node, attribute, value) {\n    attr(node, attribute, value);\n    if (value == null)\n        dispatch_dev(\"SvelteDOMRemoveAttribute\", { node, attribute });\n    else\n        dispatch_dev(\"SvelteDOMSetAttribute\", { node, attribute, value });\n}\nfunction prop_dev(node, property, value) {\n    node[property] = value;\n    dispatch_dev(\"SvelteDOMSetProperty\", { node, property, value });\n}\nfunction dataset_dev(node, property, value) {\n    node.dataset[property] = value;\n    dispatch_dev(\"SvelteDOMSetDataset\", { node, property, value });\n}\nfunction set_data_dev(text, data) {\n    data = '' + data;\n    if (text.wholeText === data)\n        return;\n    dispatch_dev(\"SvelteDOMSetData\", { node: text, data });\n    text.data = data;\n}\nfunction validate_each_argument(arg) {\n    if (typeof arg !== 'string' && !(arg && typeof arg === 'object' && 'length' in arg)) {\n        let msg = '{#each} only iterates over array-like objects.';\n        if (typeof Symbol === 'function' && arg && Symbol.iterator in arg) {\n            msg += ' You can use a spread to convert this iterable into an array.';\n        }\n        throw new Error(msg);\n    }\n}\nfunction validate_slots(name, slot, keys) {\n    for (const slot_key of Object.keys(slot)) {\n        if (!~keys.indexOf(slot_key)) {\n            console.warn(`<${name}> received an unexpected slot \"${slot_key}\".`);\n        }\n    }\n}\nclass SvelteComponentDev extends SvelteComponent {\n    constructor(options) {\n        if (!options || (!options.target && !options.$$inline)) {\n            throw new Error(`'target' is a required option`);\n        }\n        super();\n    }\n    $destroy() {\n        super.$destroy();\n        this.$destroy = () => {\n            console.warn(`Component was already destroyed`); // eslint-disable-line no-console\n        };\n    }\n    $capture_state() { }\n    $inject_state() { }\n}\nfunction loop_guard(timeout) {\n    const start = Date.now();\n    return () => {\n        if (Date.now() - start > timeout) {\n            throw new Error(`Infinite loop detected`);\n        }\n    };\n}\n\nexport { HtmlTag, SvelteComponent, SvelteComponentDev, SvelteElement, action_destroyer, add_attribute, add_classes, add_flush_callback, add_location, add_render_callback, add_resize_listener, add_transform, afterUpdate, append, append_dev, assign, attr, attr_dev, beforeUpdate, bind, binding_callbacks, blank_object, bubble, check_outros, children, claim_component, claim_element, claim_space, claim_text, clear_loops, component_subscribe, compute_rest_props, compute_slots, createEventDispatcher, create_animation, create_bidirectional_transition, create_component, create_in_transition, create_out_transition, create_slot, create_ssr_component, current_component, custom_event, dataset_dev, debug, destroy_block, destroy_component, destroy_each, detach, detach_after_dev, detach_before_dev, detach_between_dev, detach_dev, dirty_components, dispatch_dev, each, element, element_is, empty, escape, escaped, exclude_internal_props, fix_and_destroy_block, fix_and_outro_and_destroy_block, fix_position, flush, getContext, get_binding_group_value, get_current_component, get_slot_changes, get_slot_context, get_spread_object, get_spread_update, get_store_value, globals, group_outros, handle_promise, has_prop, identity, init, insert, insert_dev, intros, invalid_attribute_name_character, is_client, is_crossorigin, is_empty, is_function, is_promise, listen, listen_dev, loop, loop_guard, missing_component, mount_component, noop, not_equal, now, null_to_empty, object_without_properties, onDestroy, onMount, once, outro_and_destroy_block, prevent_default, prop_dev, query_selector_all, raf, run, run_all, safe_not_equal, schedule_update, select_multiple_value, select_option, select_options, select_value, self, setContext, set_attributes, set_current_component, set_custom_element_data, set_data, set_data_dev, set_input_type, set_input_value, set_now, set_raf, set_store_value, set_style, set_svg_attributes, space, spread, stop_propagation, subscribe, svg_element, text, tick, time_ranges_to_array, to_number, toggle_class, transition_in, transition_out, update_keyed_each, update_slot, validate_component, validate_each_argument, validate_each_keys, validate_slots, validate_store, xlink_attr };\n","<script>\r\n  let stepSize = 50;\r\n  let moveBX = 170;\r\n  let moveJX = 340;\r\n  let moveBY = 140;\r\n  let moveJY = 140;\r\n  let moveJasperX = 500;\r\n  let moveJasperY = 165;\r\n  let showJasper = false;\r\n  let moveRixtX = 80;\r\n  let moveRixtY = 165;\r\n  let showRixt = false;\r\n  let moveRedMonsterX = 300;\r\n  let moveRedMonsterY = 80;\r\n  let redMonster = false;\r\n  let moveBlueMonsterX = 150;\r\n  let moveBlueMonsterY = 80;\r\n  let blueMonster = false;\r\n  let moveMonsterYDown = 80;\r\n  let moveMonsterYUp = 60;\r\n  let moveYDown = 140;\r\n  let moveYUp = 130;\r\n  let moveUp = true;\r\n  let scene = -1;\r\n  let intermission = false;\r\n  let bruid = true;\r\n  let bruidegom = true;\r\n  let showHelpJasper = false;\r\n  let showCallJasper = false;\r\n  let showHelpRixt = false;\r\n  let showCallRixt = false;\r\n  let showRedStar = false;\r\n  let showBlueStar = false;\r\n  let monsterRotate = 0;\r\n  let punch = false;\r\n  let showJa = false;\r\n  let final = false;\r\n  let moveHat = 0;\r\n  let showJaText = false;\r\n  let bouquet = false;\r\n\r\n  let slaButton = false;\r\n  const reloadPage = () => {\r\n    location.reload();\r\n  };\r\n  const nextScene = () => {\r\n    if (scene < 4) {\r\n      scene += 1;\r\n\r\n      intermission = true;\r\n      setTimeout(() => {\r\n        intermission = false;\r\n      }, 300);\r\n    }\r\n\r\n    if (scene == 0) {\r\n      moveBX = 170;\r\n      moveJX = 340;\r\n    } else if (scene == 4) {\r\n      showJasper = false;\r\n      showRixt = false;\r\n      moveBX = 253;\r\n      moveJX = 257;\r\n    } else {\r\n      moveBX = 50;\r\n      moveJX = 500;\r\n    }\r\n\r\n    if (scene == 1) {\r\n      setTimeout(() => {\r\n        showHelpJasper = true;\r\n        showHelpRixt = true;\r\n      }, 500);\r\n\r\n      setTimeout(() => {\r\n        showHelpJasper = false;\r\n        showHelpRixt = false;\r\n      }, 2000);\r\n    }\r\n\r\n    if (scene == 2) {\r\n      setTimeout(() => {\r\n        showHelpJasper = true;\r\n        showHelpRixt = true;\r\n      }, 300);\r\n\r\n      setTimeout(() => {\r\n        showCallJasper = true;\r\n        showCallRixt = true;\r\n      }, 1000);\r\n\r\n      setTimeout(() => {\r\n        showHelpJasper = false;\r\n        showHelpRixt = false;\r\n      }, 2000);\r\n\r\n      setTimeout(() => {\r\n        showCallJasper = false;\r\n        showCallRixt = false;\r\n      }, 2500);\r\n\r\n      if (bruid) {\r\n        showRixt = false;\r\n        showJasper = true;\r\n        redMonster = true;\r\n      } else if (bruidegom) {\r\n        showRixt = true;\r\n        showJasper = false;\r\n        blueMonster = true;\r\n      }\r\n    }\r\n\r\n    if (scene == 3) {\r\n      console.log(scene);\r\n      showRixt = true;\r\n      showJasper = true;\r\n      moveJasperX = 320;\r\n      moveRixtX = 185;\r\n\r\n      final = true;\r\n      if (bruid) {\r\n        moveJX = 257;\r\n      } else {\r\n        moveBX = 253;\r\n      }\r\n    }\r\n  };\r\n\r\n  const previousScene = () => {\r\n    scene -= 1;\r\n    intermission = true;\r\n    setTimeout(() => {\r\n      intermission = false;\r\n    }, 300);\r\n\r\n    if (scene == 0) {\r\n      moveBX = 170;\r\n      moveJX = 340;\r\n    } else {\r\n      moveBX = 500;\r\n      moveJX = 50;\r\n    }\r\n  };\r\n\r\n  $: if ((scene == 1 || scene == 2) && bruid && moveBX > moveJasperX) {\r\n    nextScene();\r\n  }\r\n\r\n  $: if ((scene == 1 || scene == 2) && bruidegom && moveJX < moveRixtX) {\r\n    nextScene();\r\n  }\r\n\r\n  $: if (redMonster) {\r\n    console.log(\"showRedMonster\");\r\n  }\r\n\r\n  const selectBernadet = () => {\r\n    bruid = true;\r\n    bruidegom = false;\r\n    nextScene();\r\n  };\r\n\r\n  const selectJelmer = () => {\r\n    bruid = false;\r\n    bruidegom = true;\r\n    nextScene();\r\n  };\r\n  let moveLinks = () => {\r\n    showJa = false;\r\n    if (bruid) {\r\n      moveBX -= stepSize;\r\n    }\r\n    if (bruidegom) {\r\n      moveJX -= stepSize;\r\n      if (blueMonster && moveJX < moveBlueMonsterX + 80) {\r\n        moveJX = moveBlueMonsterX + 80;\r\n        slaButton = true;\r\n      } else if (scene == 3 && moveJX < 270) {\r\n        moveJX = 257;\r\n        showJa = true;\r\n      }\r\n    }\r\n\r\n    stepUp();\r\n    stepUpMonster();\r\n  };\r\n\r\n  const stepUp = () => {\r\n    if (bruid) {\r\n      moveBY = moveYUp;\r\n    }\r\n\r\n    if (bruidegom) {\r\n      moveJY = moveYUp;\r\n    }\r\n\r\n    setTimeout(() => {\r\n      moveJY = moveYDown;\r\n      moveBY = moveYDown;\r\n    }, 100);\r\n  };\r\n\r\n  const stepUpMonster = () => {\r\n    // moveRedMonsterY = moveMonsterYUp;\r\n    setTimeout(() => {\r\n      moveRedMonsterY = moveMonsterYUp;\r\n      moveBlueMonsterY = moveMonsterYUp;\r\n    }, 1000);\r\n\r\n    setTimeout(() => {\r\n      moveRedMonsterY = moveMonsterYDown;\r\n      moveBlueMonsterY = moveMonsterYDown;\r\n    }, 1100);\r\n  };\r\n  $: console.log(moveRedMonsterY);\r\n  let moveRechts = () => {\r\n    showJa = false;\r\n    if (bruid) {\r\n      moveBX += stepSize;\r\n      if (redMonster && moveBX > moveRedMonsterX - 15) {\r\n        moveBX = moveRedMonsterX - 15;\r\n        slaButton = true;\r\n      } else if (scene == 3 && moveBX > 240) {\r\n        moveBX = 253;\r\n        showJa = true;\r\n      }\r\n    }\r\n\r\n    if (bruidegom) {\r\n      moveJX += stepSize;\r\n    }\r\n    stepUp();\r\n    stepUpMonster();\r\n  };\r\n  let action = () => {\r\n    if (bruidegom) {\r\n      moveHat = 20;\r\n    } else {\r\n      bouquet = true;\r\n    }\r\n\r\n    setTimeout(() => {\r\n      bouquet = false;\r\n    }, 800);\r\n\r\n    //punch = true;\r\n\r\n    setTimeout(() => {\r\n      if (bruidegom) {\r\n        moveHat = 0;\r\n      }\r\n    }, 100);\r\n  };\r\n  let slaMonster = () => {\r\n    slaButton = false;\r\n    punch = true;\r\n\r\n    setTimeout(() => {\r\n      punch = false;\r\n    }, 350);\r\n\r\n    setTimeout(() => {\r\n      monsterRotate = -15;\r\n      moveRedMonsterY = moveMonsterYUp - 60;\r\n      moveBlueMonsterX = moveBlueMonsterX - 40;\r\n      moveBlueMonsterY = moveMonsterYUp - 60;\r\n    }, 150);\r\n    setTimeout(() => {\r\n      if (bruid) {\r\n        showRedStar = true;\r\n      } else {\r\n        showBlueStar = true;\r\n      }\r\n    }, 700);\r\n    setTimeout(() => {\r\n      redMonster = false;\r\n      blueMonster = false;\r\n    }, 900);\r\n    setTimeout(() => {\r\n      showRedStar = false;\r\n      showBlueStar = false;\r\n    }, 1100);\r\n    console.log(\"slaMonster\");\r\n  };\r\n\r\n  let jaDoen = () => {\r\n    setTimeout(() => {\r\n      showJaText = true;\r\n    }, 100);\r\n    showJaText;\r\n    setTimeout(() => {\r\n      nextScene();\r\n      showJaText = false;\r\n    }, 2000);\r\n  };\r\n</script>\r\n\r\n<style>\r\n  main {\r\n    text-align: center;\r\n    padding: 0;\r\n    max-width: 240px;\r\n    margin: 0 auto;\r\n  }\r\n\r\n  h1 {\r\n    color: #ff3e00;\r\n    text-transform: uppercase;\r\n    font-size: 4em;\r\n    font-weight: 100;\r\n  }\r\n\r\n  @media (min-width: 640px) {\r\n    main {\r\n      max-width: none;\r\n    }\r\n  }\r\n\r\n  .svg-text {\r\n    pointer-events: none;\r\n  }\r\n</style>\r\n\r\n<main>\r\n  <!-- <h1>Hello {name}!</h1>\r\n  <p>\r\n    Visit the\r\n    <a href=\"https://svelte.dev/tutorial\">Svelte tutorial</a>\r\n    to learn how to build Svelte apps.\r\n  </p>\r\n  <button on:click={moveLinks}>Links</button>\r\n  <button on:click={moveRechts}>Rechts</button> -->\r\n\r\n  <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"100%\" viewBox=\"0 0 600 350\">\r\n    {#if scene == -1}\r\n      <svg>\r\n        <rect x=\"0px\" y=\"0px\" width=\"600px\" height=\"350px\" fill=\"#152238\" />\r\n\r\n        <text class=\"svg-text\" stroke=\"white\" x=\"100px\" y=\"145px\" fill=\"white\">\r\n          Hallo, dit is een 100% accurate interactieve samenvatting\r\n        </text>\r\n        <text class=\"svg-text\" stroke=\"white\" x=\"100px\" y=\"165px\" fill=\"white\">\r\n          van de bruiloft van Bernadet en Jelmer\r\n        </text>\r\n        <g on:click={nextScene}>\r\n\r\n          <rect\r\n            x=\"230px\"\r\n            y=\"180px\"\r\n            width=\"130px\"\r\n            height=\"75px\"\r\n            fill=\"darkred\"\r\n            stroke=\"black\"\r\n            stroke-width=\"3px\" />\r\n          <text\r\n            class=\"svg-text\"\r\n            stroke=\"white\"\r\n            font-size=\"36\"\r\n            x=\"245px\"\r\n            y=\"230px\"\r\n            fill=\"white\">\r\n            START\r\n          </text>\r\n        </g>\r\n      </svg>\r\n    {/if}\r\n    {#if scene == 0}\r\n      <svg>\r\n        <rect x=\"0px\" y=\"0px\" width=\"600px\" height=\"350px\" fill=\"#152238\" />\r\n        <g on:click={selectBernadet}>\r\n\r\n          <rect\r\n            x=\"150px\"\r\n            y=\"130px\"\r\n            width=\"100px\"\r\n            height=\"180px\"\r\n            fill=\"darkred\"\r\n            stroke=\"black\"\r\n            stroke-width=\"3px\" />\r\n          <text\r\n            class=\"svg-text\"\r\n            stroke=\"white\"\r\n            x=\"170px\"\r\n            y=\"160px\"\r\n            fill=\"white\">\r\n            Bernadet\r\n          </text>\r\n        </g>\r\n        <g on:click={selectJelmer}>\r\n          <rect\r\n            x=\"350px\"\r\n            y=\"130px\"\r\n            width=\"100px\"\r\n            height=\"180px\"\r\n            fill=\"darkred\"\r\n            stroke=\"black\"\r\n            stroke-width=\"3px\" />\r\n          <text\r\n            class=\"svg-text\"\r\n            stroke=\"white\"\r\n            x=\"377px\"\r\n            y=\"160px\"\r\n            fill=\"white\">\r\n            Jelmer\r\n          </text>\r\n        </g>\r\n        <text class=\"svg-text\" stroke=\"white\" x=\"260px\" y=\"145px\" fill=\"white\">\r\n          Wie ben jij?\r\n        </text>\r\n      </svg>\r\n    {/if}\r\n    {#if scene == 1}\r\n      <svg>\r\n        <rect x=\"0px\" y=\"0px\" width=\"600px\" height=\"350px\" fill=\"lightblue\" />\r\n        <rect x=\"0px\" y=\"250px\" width=\"600px\" height=\"100px\" fill=\"darkgreen\" />\r\n\r\n        {#if bruid}\r\n          <rect x=\"490px\" y=\"230px\" width=\"10px\" height=\"30px\" fill=\"white\" />\r\n          <rect x=\"460px\" y=\"200px\" width=\"65px\" height=\"30px\" fill=\"white\" />\r\n          <g transform=\"translate(525,200)\">\r\n            <polygon\r\n              points=\"0,0 0,30 15,15\"\r\n              fill=\"white\"\r\n              stroke-width=\"1px\"\r\n              stroke=\"white\" />\r\n          </g>\r\n\r\n          <text class=\"svg-text\" x=\"470px\" y=\"220px\">Bruiloft</text>\r\n        {:else}\r\n          <rect x=\"185px\" y=\"230px\" width=\"10px\" height=\"30px\" fill=\"white\" />\r\n          <rect x=\"160px\" y=\"200px\" width=\"65px\" height=\"30px\" fill=\"white\" />\r\n          <g transform=\"translate(160,200)\">\r\n            <polygon\r\n              points=\"0,0 0,30 -15,15\"\r\n              fill=\"white\"\r\n              stroke-width=\"0px\"\r\n              stroke=\"white\" />\r\n          </g>\r\n\r\n          <text class=\"svg-text\" x=\"165px\" y=\"220px\">Bruiloft</text>\r\n        {/if}\r\n      </svg>\r\n    {/if}\r\n\r\n    {#if scene == 2}\r\n      <svg>\r\n        <rect x=\"0px\" y=\"0px\" width=\"600px\" height=\"350px\" fill=\"lightblue\" />\r\n        <rect x=\"0px\" y=\"250px\" width=\"600px\" height=\"100px\" fill=\"darkgreen\" />\r\n\r\n      </svg>\r\n    {/if}\r\n\r\n    {#if scene == 3}\r\n      <svg>\r\n\r\n        <rect x=\"0px\" y=\"0px\" width=\"600px\" height=\"350px\" fill=\"#efebd8\" />\r\n        <rect x=\"0px\" y=\"250px\" width=\"600px\" height=\"100px\" fill=\"#152238\" />\r\n        <rect x=\"200px\" y=\"250px\" width=\"200px\" height=\"100px\" fill=\"darkred\" />\r\n        <g transform=\"translate(171,110) scale(3)\">\r\n          <svg width=\"100px\" height=\"150px\" viewBox=\"0 0 200 300\">\r\n            <rect\r\n              x=\"0px\"\r\n              y=\"0px\"\r\n              width=\"170px\"\r\n              height=\"20px\"\r\n              fill=\"darkgreen\"\r\n              style=\"\" />\r\n            <rect\r\n              x=\"0px\"\r\n              y=\"0px\"\r\n              width=\"20\"\r\n              height=\"100px\"\r\n              style=\"\"\r\n              fill=\"darkgreen\" />\r\n            <rect\r\n              x=\"150\"\r\n              y=\"0px\"\r\n              width=\"20\"\r\n              height=\"100px\"\r\n              style=\"\"\r\n              fill=\"darkgreen\" />\r\n          </svg>\r\n        </g>\r\n      </svg>\r\n    {/if}\r\n    {#if scene == 4}\r\n      <svg>\r\n\r\n        <rect x=\"0px\" y=\"0px\" width=\"600px\" height=\"350px\" fill=\"#152238\" />\r\n\r\n        <svg\r\n          x=\"10px\"\r\n          y=\"0px\"\r\n          width=\"600px\"\r\n          height=\"450px\"\r\n          viewBox=\"0 0 200 150\">\r\n          <path\r\n            d=\"M100 120 C 30,70, 60, 20, 100, 60 C 100, 45, 190, 25, 100, 120\r\n            L100,100z\"\r\n            stroke-width=\"5px\"\r\n            stroke=\"red\"\r\n            fill=\"red\" />\r\n        </svg>\r\n        <text stroke=\"white\" x=\"170px\" y=\"100px\" fill=\"white\">\r\n          Van Harte Gefeliciteerd!!!!\r\n        </text>\r\n        <text stroke=\"white\" x=\"170px\" y=\"123px\" fill=\"white\">\r\n          Liefs Na en Ewout\r\n        </text>\r\n      </svg>\r\n    {/if}\r\n    {#if redMonster && scene == 2}\r\n      <g\r\n        transform=\"rotate({monsterRotate}, {moveRedMonsterX}, {moveRedMonsterY})\">\r\n        <svg\r\n          x={moveRedMonsterX}\r\n          y={moveRedMonsterY}\r\n          width=\"150px\"\r\n          height=\"225px\"\r\n          viewBox=\"0 0 200 300\">\r\n\r\n          <rect\r\n            x=\"110px\"\r\n            y=\"145px\"\r\n            width=\"20px\"\r\n            height=\"5px\"\r\n            fill=\"red\"\r\n            style=\"\" />\r\n          <rect\r\n            x=\"100px\"\r\n            y=\"100px\"\r\n            width=\"40px\"\r\n            height=\"45px\"\r\n            fill=\"red\"\r\n            style=\"\" />\r\n          <rect x=\"108\" y=\"108\" width=\"9\" height=\"3\" style=\"\" fill=\"black\" />\r\n          <rect x=\"123\" y=\"108\" width=\"9\" height=\"3\" style=\"\" fill=\"black\" />\r\n          <rect x=\"110\" y=\"112\" width=\"5\" height=\"5\" style=\"\" fill=\"black\" />\r\n          <rect x=\"125\" y=\"112\" width=\"5\" height=\"5\" style=\"\" fill=\"black\" />\r\n          <polygon\r\n            points=\"110,130 115,130 110,120\"\r\n            fill=\"white\"\r\n            stroke-width=\"1px\"\r\n            stroke=\"white\" />\r\n          <polygon\r\n            points=\"130,130 125,130 130,120\"\r\n            fill=\"white\"\r\n            stroke-width=\"1px\"\r\n            stroke=\"white\" />\r\n\r\n          <polygon\r\n            points=\"100,100 110,100 100,80\"\r\n            fill=\"red\"\r\n            stroke-width=\"0px\"\r\n            stroke=\"red\" />\r\n          <polygon\r\n            points=\"140,100 130,100 140,80\"\r\n            fill=\"red\"\r\n            stroke-width=\"0px\"\r\n            stroke=\"white\" />\r\n          <rect x=\"107\" y=\"130\" width=\"25\" height=\"3\" style=\"\" />\r\n\r\n          <rect\r\n            x=\"160px\"\r\n            y=\"110px\"\r\n            width=\"20px\"\r\n            height=\"50px\"\r\n            fill=\"red\"\r\n            style=\"\" />\r\n          <rect\r\n            x=\"158px\"\r\n            y=\"110px\"\r\n            width=\"25px\"\r\n            height=\"20px\"\r\n            fill=\"red\"\r\n            style=\"\" />\r\n          <rect\r\n            x=\"57px\"\r\n            y=\"110px\"\r\n            width=\"25px\"\r\n            height=\"20px\"\r\n            fill=\"red\"\r\n            style=\"\" />\r\n          <rect\r\n            x=\"60px\"\r\n            y=\"110px\"\r\n            width=\"20px\"\r\n            height=\"50px\"\r\n            fill=\"red\"\r\n            style=\"\" />\r\n          <rect\r\n            x=\"60px\"\r\n            y=\"148px\"\r\n            width=\"120px\"\r\n            height=\"20px\"\r\n            fill=\"red\"\r\n            style=\"\" />\r\n          <rect\r\n            x=\"100px\"\r\n            y=\"148px\"\r\n            width=\"40px\"\r\n            height=\"60px\"\r\n            fill=\"red\"\r\n            style=\"\" />\r\n          <rect\r\n            x=\"100px\"\r\n            y=\"188px\"\r\n            width=\"40px\"\r\n            height=\"20px\"\r\n            fill=\"black\"\r\n            style=\"\" />\r\n\r\n          <rect\r\n            x=\"100px\"\r\n            y=\"208\"\r\n            width=\"15\"\r\n            height=\"35\"\r\n            style=\"\"\r\n            fill=\"black\" />\r\n\r\n          <rect\r\n            x=\"125px\"\r\n            y=\"208\"\r\n            width=\"15\"\r\n            height=\"35\"\r\n            style=\"\"\r\n            fill=\"black\" />\r\n          <rect\r\n            x=\" 90px\"\r\n            y=\"243px\"\r\n            width=\"25\"\r\n            height=\"10\"\r\n            fill=\"red\"\r\n            style=\"\" />\r\n\r\n          <rect\r\n            x=\"125px\"\r\n            y=\"243px\"\r\n            width=\"25\"\r\n            height=\"10\"\r\n            fill=\"red\"\r\n            style=\"\" />\r\n\r\n        </svg>\r\n      </g>\r\n    {/if}\r\n    {#if showJasper}\r\n      <svg\r\n        x={moveJasperX}\r\n        y={moveJasperY}\r\n        width=\"80px\"\r\n        height=\"120\"\r\n        viewBox=\"0 0 200 300\">\r\n\r\n        <rect\r\n          x=\"110px\"\r\n          y=\"145px\"\r\n          width=\"20px\"\r\n          height=\"5px\"\r\n          fill=\"#ecb\"\r\n          style=\"\" />\r\n        <rect\r\n          x=\"100px\"\r\n          y=\"100px\"\r\n          width=\"40px\"\r\n          height=\"45px\"\r\n          fill=\"#ecb\"\r\n          style=\"\" />\r\n        <rect\r\n          x=\"94px\"\r\n          y=\"115px\"\r\n          width=\"6px\"\r\n          height=\"7px\"\r\n          fill=\"#ecb\"\r\n          style=\"\" />\r\n        <rect x=\"124\" y=\"105\" width=\"20\" height=\"27px\" style=\"\" fill=\"yellow\" />\r\n        <rect x=\"105\" y=\"110\" width=\"5\" height=\"5\" style=\"\" fill=\"black\" />\r\n        <rect x=\"123\" y=\"110\" width=\"10\" height=\"15\" style=\"\" />\r\n        <rect x=\"123\" y=\"113\" width=\"7\" height=\"9\" fill=\"#ecb\" style=\"\" />\r\n        <rect x=\"124\" y=\"115\" width=\"3\" height=\"4\" fill=\"black\" style=\"\" />\r\n\r\n        <rect x=\"105\" y=\"130\" width=\"12\" height=\"3\" style=\"\" />\r\n        <rect x=\"105px\" y=\"97px\" width=\"39\" height=\"8\" fill=\"yellow\" style=\"\" />\r\n        <rect x=\"105px\" y=\"93px\" width=\"10\" height=\"8\" fill=\"yellow\" style=\"\" />\r\n        <!-- <rect x=\"100\" y=\"70\" width=\"44\" height=\"30\" style=\"\" fill=\"black\" /> -->\r\n\r\n        <rect\r\n          x=\"100px\"\r\n          y=\"148px\"\r\n          width=\"40px\"\r\n          height=\"60px\"\r\n          fill=\"darkblue\"\r\n          style=\"\" />\r\n        <rect\r\n          x=\"100px\"\r\n          y=\"148px\"\r\n          width=\"10\"\r\n          height=\"40px\"\r\n          fill=\"white\"\r\n          style=\"\" />\r\n        <rect x=\"100\" y=\"148\" width=\"7\" height=\"6\" fill=\"orange\" style=\"\" />\r\n        <rect x=\"100\" y=\"155\" width=\"6\" height=\"25\" fill=\"orange\" style=\"\" />\r\n\r\n        <rect x=\"102px\" y=\"243px\" width=\"11\" height=\"5\" fill=\"black\" style=\"\" />\r\n        <rect x=\"127px\" y=\"243px\" width=\"11\" height=\"5\" fill=\"black\" style=\"\" />\r\n        <rect\r\n          x=\"100px\"\r\n          y=\"208\"\r\n          width=\"15\"\r\n          height=\"35\"\r\n          style=\"\"\r\n          fill=\"darkblue\" />\r\n        <rect\r\n          x=\"125px\"\r\n          y=\"208\"\r\n          width=\"15\"\r\n          height=\"35\"\r\n          style=\"\"\r\n          fill=\"darkblue\" />\r\n        <rect\r\n          x=\"90px\"\r\n          y=\"245px\"\r\n          width=\"25\"\r\n          height=\"10\"\r\n          fill=\"#5A3825\"\r\n          style=\"\" />\r\n        <rect\r\n          x=\"125px\"\r\n          y=\"245px\"\r\n          width=\"25\"\r\n          height=\"10\"\r\n          fill=\"#5A3825\"\r\n          style=\"\" />\r\n        <rect\r\n          x=\"120px\"\r\n          y=\"148px\"\r\n          width=\"15px\"\r\n          height=\"50px\"\r\n          fill=\"darkblue\"\r\n          stroke=\"white\"\r\n          stroke-width=\"1px\"\r\n          style=\"\" />\r\n        <rect\r\n          x=\"120px\"\r\n          y=\"192px\"\r\n          width=\"15px\"\r\n          height=\"5px\"\r\n          fill=\"white\"\r\n          stroke=\"white\"\r\n          stroke-width=\"1px\"\r\n          style=\"\" />\r\n        <rect\r\n          x=\"117px\"\r\n          y=\"195px\"\r\n          width=\"20px\"\r\n          height=\"15px\"\r\n          style=\"\"\r\n          fill=\"#ecb\" />\r\n\r\n      </svg>\r\n    {/if}\r\n    {#if showRixt}\r\n      <svg\r\n        x={moveRixtX}\r\n        y={moveRixtY}\r\n        width=\"80px\"\r\n        height=\"120px\"\r\n        viewBox=\"0 0 200 300\">\r\n        <rect\r\n          x=\"110px\"\r\n          y=\"145px\"\r\n          width=\"20px\"\r\n          height=\"5px\"\r\n          fill=\"#ecb\"\r\n          style=\"\" />\r\n        <rect\r\n          x=\"100px\"\r\n          y=\"100px\"\r\n          width=\"40px\"\r\n          height=\"45px\"\r\n          fill=\"#ecb\"\r\n          style=\"\" />\r\n        <rect\r\n          x=\"140px\"\r\n          y=\"115px\"\r\n          width=\"6px\"\r\n          height=\"7px\"\r\n          fill=\"#ecb\"\r\n          style=\"\" />\r\n        <rect x=\"100\" y=\"96\" width=\"35\" height=\"8px\" style=\"\" fill=\"yellow\" />\r\n        <rect x=\"125\" y=\"90\" width=\"15\" height=\"8px\" style=\"\" fill=\"yellow\" />\r\n        <rect x=\"130\" y=\"110\" width=\"5\" height=\"5\" style=\"\" fill=\"black\" />\r\n        <rect x=\"130\" y=\"130\" width=\"8\" height=\"3\" style=\"\" />\r\n        <rect\r\n          x=\"100px\"\r\n          y=\"148px\"\r\n          width=\"40px\"\r\n          height=\"50px\"\r\n          style=\"\"\r\n          fill=\"cyan\" />\r\n        <rect\r\n          x=\"96px\"\r\n          y=\"198px\"\r\n          width=\"48px\"\r\n          height=\"35px\"\r\n          style=\"\"\r\n          fill=\"cyan\" />\r\n        <rect\r\n          x=\"115px\"\r\n          y=\"148px\"\r\n          width=\"15px\"\r\n          height=\"45px\"\r\n          style=\"\"\r\n          fill=\"#ecb\" />\r\n        <rect\r\n          x=\"113px\"\r\n          y=\"190px\"\r\n          width=\"20px\"\r\n          height=\"15px\"\r\n          style=\"\"\r\n          fill=\"#ecb\" />\r\n        <rect x=\"100\" y=\"100\" width=\"23\" height=\"45px\" style=\"\" fill=\"yellow\" />\r\n      </svg>\r\n    {/if}\r\n    {#if blueMonster && scene == 2}\r\n      <g\r\n        transform=\"rotate({monsterRotate}, {moveBlueMonsterX}, {moveBlueMonsterY})\">\r\n        <svg\r\n          x={moveBlueMonsterX}\r\n          y={moveBlueMonsterY}\r\n          width=\"150px\"\r\n          height=\"225px\"\r\n          viewBox=\"0 0 200 300\">\r\n\r\n          <rect\r\n            x=\"110px\"\r\n            y=\"145px\"\r\n            width=\"20px\"\r\n            height=\"5px\"\r\n            fill=\"blue\"\r\n            style=\"\" />\r\n          <rect\r\n            x=\"100px\"\r\n            y=\"100px\"\r\n            width=\"40px\"\r\n            height=\"45px\"\r\n            fill=\"blue\"\r\n            style=\"\" />\r\n          <rect x=\"108\" y=\"108\" width=\"9\" height=\"3\" style=\"\" fill=\"black\" />\r\n          <rect x=\"123\" y=\"108\" width=\"9\" height=\"3\" style=\"\" fill=\"black\" />\r\n          <rect x=\"110\" y=\"112\" width=\"5\" height=\"5\" style=\"\" fill=\"black\" />\r\n          <rect x=\"125\" y=\"112\" width=\"5\" height=\"5\" style=\"\" fill=\"black\" />\r\n          <polygon\r\n            points=\"110,130 115,130 110,140\"\r\n            fill=\"white\"\r\n            stroke-width=\"1px\"\r\n            stroke=\"white\" />\r\n          <polygon\r\n            points=\"130,130 125,130 130,140\"\r\n            fill=\"white\"\r\n            stroke-width=\"1px\"\r\n            stroke=\"white\" />\r\n\r\n          <polygon\r\n            points=\"100,100 110,100 100,80\"\r\n            fill=\"blue\"\r\n            stroke-width=\"0px\"\r\n            stroke=\"blue\" />\r\n          <polygon\r\n            points=\"140,100 130,100 140,80\"\r\n            fill=\"blue\"\r\n            stroke-width=\"0px\"\r\n            stroke=\"white\" />\r\n          <rect x=\"107\" y=\"127\" width=\"25\" height=\"3\" style=\"\" />\r\n\r\n          <!-- <rect x=\"100\" y=\"70\" width=\"44\" height=\"30\" style=\"\" fill=\"black\" /> -->\r\n          <rect\r\n            x=\"160px\"\r\n            y=\"148px\"\r\n            width=\"20px\"\r\n            height=\"50px\"\r\n            fill=\"blue\"\r\n            style=\"\" />\r\n          <rect\r\n            x=\"158px\"\r\n            y=\"185px\"\r\n            width=\"25px\"\r\n            height=\"20px\"\r\n            fill=\"blue\"\r\n            style=\"\" />\r\n          <rect\r\n            x=\"57px\"\r\n            y=\"185px\"\r\n            width=\"25px\"\r\n            height=\"20px\"\r\n            fill=\"blue\"\r\n            style=\"\" />\r\n          <rect\r\n            x=\"60px\"\r\n            y=\"148px\"\r\n            width=\"20px\"\r\n            height=\"50px\"\r\n            fill=\"blue\"\r\n            style=\"\" />\r\n          <rect\r\n            x=\"60px\"\r\n            y=\"148px\"\r\n            width=\"120px\"\r\n            height=\"20px\"\r\n            fill=\"blue\"\r\n            style=\"\" />\r\n          <rect\r\n            x=\"100px\"\r\n            y=\"148px\"\r\n            width=\"40px\"\r\n            height=\"60px\"\r\n            fill=\"blue\"\r\n            style=\"\" />\r\n          <rect\r\n            x=\"100px\"\r\n            y=\"188px\"\r\n            width=\"40px\"\r\n            height=\"20px\"\r\n            fill=\"black\"\r\n            style=\"\" />\r\n          <rect\r\n            x=\"100px\"\r\n            y=\"208\"\r\n            width=\"15\"\r\n            height=\"35\"\r\n            style=\"\"\r\n            fill=\"black\" />\r\n\r\n          <rect\r\n            x=\"125px\"\r\n            y=\"208\"\r\n            width=\"15\"\r\n            height=\"35\"\r\n            style=\"\"\r\n            fill=\"black\" />\r\n          <rect\r\n            x=\"90px\"\r\n            y=\"243px\"\r\n            width=\"25\"\r\n            height=\"10\"\r\n            fill=\"blue\"\r\n            style=\"\" />\r\n\r\n          <rect\r\n            x=\"125px\"\r\n            y=\"243px\"\r\n            width=\"25\"\r\n            height=\"10\"\r\n            fill=\"blue\"\r\n            style=\"\" />\r\n\r\n        </svg>\r\n\r\n      </g>\r\n    {/if}\r\n    {#if scene >= 0 && (bruidegom || final)}\r\n      <svg\r\n        class=\"svg-text\"\r\n        x={moveJX}\r\n        y={moveJY}\r\n        width=\"100px\"\r\n        height=\"150px\"\r\n        viewBox=\"0 0 200 300\">\r\n\r\n        <rect\r\n          x=\"110px\"\r\n          y=\"145px\"\r\n          width=\"20px\"\r\n          height=\"5px\"\r\n          fill=\"#ecb\"\r\n          style=\"\" />\r\n        <rect\r\n          x=\"100px\"\r\n          y=\"100px\"\r\n          width=\"40px\"\r\n          height=\"45px\"\r\n          fill=\"#ecb\"\r\n          style=\"\" />\r\n        <rect\r\n          x=\"94px\"\r\n          y=\"115px\"\r\n          width=\"6px\"\r\n          height=\"7px\"\r\n          fill=\"#ecb\"\r\n          style=\"\" />\r\n        <rect x=\"105\" y=\"97\" width=\"40\" height=\"8px\" style=\"\" fill=\"#5A3825\" />\r\n        <rect\r\n          x=\"124\"\r\n          y=\"104\"\r\n          width=\"20\"\r\n          height=\"28px\"\r\n          style=\"\"\r\n          fill=\"#5A3825\" />\r\n        <rect x=\"105\" y=\"110\" width=\"5\" height=\"5\" style=\"\" fill=\"black\" />\r\n        <rect x=\"123\" y=\"110\" width=\"10\" height=\"15\" style=\"\" />\r\n        <rect x=\"123\" y=\"113\" width=\"7\" height=\"9\" fill=\"#ecb\" style=\"\" />\r\n        <rect x=\"124\" y=\"115\" width=\"3\" height=\"4\" fill=\"black\" style=\"\" />\r\n\r\n        <rect x=\"105\" y=\"130\" width=\"12\" height=\"3\" style=\"\" />\r\n        <rect\r\n          x=\"92px\"\r\n          y=\"{98 - moveHat}px \"\r\n          width=\"58\"\r\n          height=\"7\"\r\n          color=\"black\"\r\n          style=\"\" />\r\n        <rect\r\n          x=\"100\"\r\n          y=\"{70 - moveHat}px\"\r\n          width=\"44\"\r\n          height=\"30\"\r\n          style=\"\"\r\n          fill=\"black\" />\r\n\r\n        <rect\r\n          x=\"100px\"\r\n          y=\"148px\"\r\n          width=\"40px\"\r\n          height=\"60px\"\r\n          fill=\"black\"\r\n          style=\"\" />\r\n        <rect\r\n          x=\"100px\"\r\n          y=\"148px\"\r\n          width=\"10\"\r\n          height=\"40px\"\r\n          fill=\"white\"\r\n          style=\"\" />\r\n        <rect x=\"100\" y=\"148\" width=\"7\" height=\"6\" fill=\"darkblue\" style=\"\" />\r\n        <rect x=\"100\" y=\"155\" width=\"6\" height=\"25\" fill=\"darkblue\" style=\"\" />\r\n\r\n        <rect x=\"102px\" y=\"258px\" width=\"11\" height=\"5\" fill=\"red\" style=\"\" />\r\n        <rect x=\"127px\" y=\"258px\" width=\"11\" height=\"5\" fill=\"red\" style=\"\" />\r\n        <rect x=\"100px\" y=\"208\" width=\"15\" height=\"50\" style=\"\" />\r\n        <rect x=\"125px\" y=\"208\" width=\"15\" height=\"50\" style=\"\" />\r\n        <rect\r\n          x=\"90px\"\r\n          y=\"260px\"\r\n          width=\"25\"\r\n          height=\"10\"\r\n          fill=\"#5A3825\"\r\n          style=\"\" />\r\n\r\n        <rect\r\n          x=\"125px\"\r\n          y=\"260px\"\r\n          width=\"25\"\r\n          height=\"10\"\r\n          fill=\"#5A3825\"\r\n          style=\"\" />\r\n\r\n        {#if punch}\r\n          <rect\r\n            x=\"78px\"\r\n            y=\"148px\"\r\n            width=\"55px\"\r\n            height=\"15px\"\r\n            fill=\"black\"\r\n            stroke=\"white\"\r\n            stroke-width=\"1px\"\r\n            style=\"\" />\r\n          <rect\r\n            x=\"78px\"\r\n            y=\"118px\"\r\n            width=\"15px\"\r\n            height=\"45px\"\r\n            fill=\"black\"\r\n            stroke=\"white\"\r\n            stroke-width=\"1px\"\r\n            style=\"\" />\r\n          <rect\r\n            x=\"78px\"\r\n            y=\"118px\"\r\n            width=\"15px\"\r\n            height=\"5px\"\r\n            fill=\"white\"\r\n            stroke=\"white\"\r\n            stroke-width=\"1px\"\r\n            style=\"\" />\r\n          <rect\r\n            x=\"76px\"\r\n            y=\"105px\"\r\n            width=\"20px\"\r\n            height=\"15px\"\r\n            style=\"\"\r\n            fill=\"#ecb\" />\r\n        {:else if showJa}\r\n          <rect\r\n            x=\"120px\"\r\n            y=\"148px\"\r\n            width=\"15px\"\r\n            height=\"35px\"\r\n            fill=\"black\"\r\n            stroke=\"white\"\r\n            stroke-width=\"1px\"\r\n            style=\"\" />\r\n          <rect\r\n            x=\"90px\"\r\n            y=\"168px\"\r\n            width=\"30px\"\r\n            height=\"15px\"\r\n            fill=\"black\"\r\n            stroke=\"white\"\r\n            stroke-width=\"1px\"\r\n            style=\"\" />\r\n          <rect\r\n            x=\"87px\"\r\n            y=\"168px\"\r\n            width=\"5px\"\r\n            height=\"15px\"\r\n            fill=\"white\"\r\n            stroke=\"white\"\r\n            stroke-width=\"1px\"\r\n            style=\"\" />\r\n          <rect\r\n            x=\"80px\"\r\n            y=\"166px\"\r\n            width=\"15px\"\r\n            height=\"20px\"\r\n            style=\"\"\r\n            fill=\"#ecb\" />\r\n        {:else}\r\n          <rect\r\n            x=\"120px\"\r\n            y=\"148px\"\r\n            width=\"15px\"\r\n            height=\"50px\"\r\n            fill=\"black\"\r\n            stroke=\"white\"\r\n            stroke-width=\"1px\"\r\n            style=\"\" />\r\n          <rect\r\n            x=\"120px\"\r\n            y=\"192px\"\r\n            width=\"15px\"\r\n            height=\"5px\"\r\n            fill=\"white\"\r\n            stroke=\"white\"\r\n            stroke-width=\"1px\"\r\n            style=\"\" />\r\n          <rect\r\n            x=\"117px\"\r\n            y=\"195px\"\r\n            width=\"20px\"\r\n            height=\"15px\"\r\n            style=\"\"\r\n            fill=\"#ecb\" />\r\n        {/if}\r\n\r\n      </svg>\r\n    {/if}\r\n    {#if scene >= 0 && (bruid || final)}\r\n      <svg\r\n        class=\"svg-text\"\r\n        x={moveBX - 35}\r\n        y={moveBY}\r\n        width=\"100px\"\r\n        height=\"150px\"\r\n        viewBox=\"0 0 200 300\">\r\n\r\n        <rect\r\n          x=\"110px\"\r\n          y=\"145px\"\r\n          width=\"20px\"\r\n          height=\"5px\"\r\n          fill=\"#ecb\"\r\n          style=\"\" />\r\n        <rect\r\n          x=\"100px\"\r\n          y=\"100px\"\r\n          width=\"40px\"\r\n          height=\"45px\"\r\n          fill=\"#ecb\"\r\n          style=\"\" />\r\n        <rect\r\n          x=\"140px\"\r\n          y=\"115px\"\r\n          width=\"6px\"\r\n          height=\"7px\"\r\n          fill=\"#ecb\"\r\n          style=\"\" />\r\n\r\n        <rect x=\"100\" y=\"96\" width=\"35\" height=\"8px\" style=\"\" fill=\"#5A3825\" />\r\n        <rect\r\n          x=\"100px\"\r\n          y=\"96px\"\r\n          width=\"10\"\r\n          height=\"55px\"\r\n          fill=\"white\"\r\n          style=\"\" />\r\n        <rect x=\"130\" y=\"110\" width=\"5\" height=\"5\" style=\"\" fill=\"black\" />\r\n\r\n        <rect x=\"130\" y=\"130\" width=\"8\" height=\"3\" style=\"\" />\r\n\r\n        <rect\r\n          x=\"100px\"\r\n          y=\"148px\"\r\n          width=\"40px\"\r\n          height=\"60px\"\r\n          style=\"\"\r\n          fill=\"white\" />\r\n        <rect\r\n          x=\"96px\"\r\n          y=\"208px\"\r\n          width=\"48px\"\r\n          height=\"55px\"\r\n          style=\"\"\r\n          fill=\"white\" />\r\n        <rect\r\n          x=\"100px\"\r\n          y=\"148px\"\r\n          width=\"40px\"\r\n          height=\"6px\"\r\n          style=\"\"\r\n          fill=\"#ecb\" />\r\n\r\n        {#if punch}\r\n          <rect\r\n            x=\"115px\"\r\n            y=\"148px\"\r\n            width=\"40px\"\r\n            height=\"15px\"\r\n            style=\"\"\r\n            fill=\"#ecb\" />\r\n\r\n          <rect\r\n            x=\"154px\"\r\n            y=\"118px\"\r\n            width=\"15px\"\r\n            height=\"45px\"\r\n            style=\"\"\r\n            fill=\"#ecb\" />\r\n\r\n          <rect\r\n            x=\"151px\"\r\n            y=\"114px\"\r\n            width=\"20px\"\r\n            height=\"15px\"\r\n            style=\"\"\r\n            fill=\"#ecb\" />\r\n        {:else if showJa}\r\n          <rect\r\n            x=\"115px\"\r\n            y=\"148px\"\r\n            width=\"15px\"\r\n            height=\"35px\"\r\n            style=\"\"\r\n            fill=\"#ecb\" />\r\n\r\n          <rect\r\n            x=\"115px\"\r\n            y=\"168px\"\r\n            width=\"35px\"\r\n            height=\"15px\"\r\n            style=\"\"\r\n            fill=\"#ecb\" />\r\n\r\n          <rect\r\n            x=\"145px\"\r\n            y=\"165px\"\r\n            width=\"15px\"\r\n            height=\"20px\"\r\n            style=\"\"\r\n            fill=\"#ecb\" />\r\n        {:else if bouquet}\r\n          <rect\r\n            x=\"115px\"\r\n            y=\"148px\"\r\n            width=\"15px\"\r\n            height=\"35px\"\r\n            style=\"\"\r\n            fill=\"#ecb\" />\r\n\r\n          <rect\r\n            x=\"115px\"\r\n            y=\"168px\"\r\n            width=\"35px\"\r\n            height=\"15px\"\r\n            style=\"\"\r\n            fill=\"#ecb\" />\r\n\r\n          <polygon\r\n            points=\"142,150 162,150 154,185\"\r\n            fill=\"darkgreen\"\r\n            stroke-width=\"0.1px\"\r\n            stroke=\"white\" />\r\n          <rect\r\n            x=\"141px\"\r\n            y=\"145px\"\r\n            width=\"22px\"\r\n            height=\"8px\"\r\n            style=\"\"\r\n            fill=\"darkred\" />\r\n\r\n          <rect\r\n            x=\"145px\"\r\n            y=\"165px\"\r\n            width=\"15px\"\r\n            height=\"20px\"\r\n            style=\"\"\r\n            fill=\"#ecb\" />\r\n        {:else}\r\n          <rect\r\n            x=\"115px\"\r\n            y=\"148px\"\r\n            width=\"15px\"\r\n            height=\"55px\"\r\n            style=\"\"\r\n            fill=\"#ecb\" />\r\n\r\n          <rect\r\n            x=\"113px\"\r\n            y=\"203px\"\r\n            width=\"20px\"\r\n            height=\"15px\"\r\n            style=\"\"\r\n            fill=\"#ecb\" />\r\n\r\n          <rect\r\n            x=\"100px\"\r\n            y=\"148px\"\r\n            width=\"40px\"\r\n            height=\"6px\"\r\n            style=\"\"\r\n            fill=\"#ecb\" />\r\n        {/if}\r\n\r\n        <rect\r\n          x=\"100\"\r\n          y=\"100\"\r\n          width=\"23\"\r\n          height=\"50px\"\r\n          style=\"\"\r\n          fill=\"#5A3825\" />\r\n        <rect\r\n          x=\"100px\"\r\n          y=\"96px\"\r\n          width=\"10\"\r\n          height=\"55px\"\r\n          fill=\"white\"\r\n          style=\"\" />\r\n        <!-- <rect\r\n        x=\"100px\"\r\n        y=\"148px\"\r\n        width=\"10\"\r\n        height=\"40px\"\r\n        fill=\"white\"\r\n        style=\"\" /> -->\r\n        <!-- <rect x=\"100\" y=\"148\" width=\"7\" height=\"6\" fill=\"darkblue\" style=\"\" /> -->\r\n        <!-- <rect x=\"100\" y=\"155\" width=\"6\" height=\"25\" fill=\"darkblue\" style=\"\" /> -->\r\n        <!-- <rect x=\"102px\" y=\"258px\" width=\"11\" height=\"5\" fill=\"red\" style=\"\" /> -->\r\n        <!-- <rect x=\"127px\" y=\"258px\" width=\"11\" height=\"5\" fill=\"red\" style=\"\" /> -->\r\n        <!-- <rect x=\"100px\" y=\"208\" width=\"15\" height=\"50\" style=\"\" /> -->\r\n        <!-- <rect x=\"125px\" y=\"208\" width=\"15\" height=\"50\" style=\"\" /> -->\r\n        <!-- <rect x=\"90px\" y=\"260px\" width=\"25\" height=\"10\" fill=\"#5A3825\" style=\"\" /> -->\r\n        <!-- <rect\r\n        x=\"125px\"\r\n        y=\"260px\"\r\n        width=\"25\"\r\n        height=\"10\"\r\n        fill=\"#5A3825\"\r\n        style=\"\" /> -->\r\n\r\n      </svg>\r\n    {/if}\r\n    {#if scene == 4}\r\n      <g transform=\"translate(60, 290)\" on:click={reloadPage}>\r\n\r\n        <rect\r\n          x=\"0px\"\r\n          y=\"0px\"\r\n          width=\"90px\"\r\n          height=\"40px\"\r\n          fill=\"black\"\r\n          style=\"\" />\r\n        <text x=\"12px\" y=\"25px\" stroke=\"white\" class=\"svg-text\" fill=\"white\">\r\n          Opnieuw\r\n        </text>\r\n      </g>\r\n    {/if}\r\n\r\n    {#if scene != 0 && scene != -1 && scene != 4}\r\n      <g transform=\"translate(180, 280)\" on:click={moveLinks}>\r\n\r\n        <rect\r\n          x=\"0px\"\r\n          y=\"0px\"\r\n          width=\"60px\"\r\n          height=\"40px\"\r\n          fill=\"darkblue\"\r\n          style=\"\" />\r\n        <rect\r\n          x=\"20px\"\r\n          y=\"15px\"\r\n          width=\"30px\"\r\n          height=\"10px\"\r\n          fill=\"white\"\r\n          style=\"\" />\r\n        <g transform=\"translate(5,5)\">\r\n          <polygon\r\n            points=\"15,0 15,30 0,15\"\r\n            fill=\"white\"\r\n            stroke-width=\"0.1px\"\r\n            stroke=\"white\" />\r\n        </g>\r\n      </g>\r\n\r\n      {#if slaButton}\r\n        <g transform=\"translate(270, 280)\" on:click={slaMonster}>\r\n\r\n          <rect\r\n            x=\"0px\"\r\n            y=\"0px\"\r\n            width=\"60px\"\r\n            height=\"40px\"\r\n            fill=\"darkblue\"\r\n            style=\"\" />\r\n          <text x=\"17px\" y=\"25px\" stroke=\"white\" class=\"svg-text\" fill=\"white\">\r\n            Sla!!\r\n          </text>\r\n        </g>\r\n      {:else if showJa && scene != 4}\r\n        <g transform=\"translate(270, 280)\" on:click={jaDoen}>\r\n\r\n          <rect\r\n            x=\"0px\"\r\n            y=\"0px\"\r\n            width=\"60px\"\r\n            height=\"40px\"\r\n            fill=\"darkblue\"\r\n            style=\"\" />\r\n          <text x=\"20px\" y=\"25px\" stroke=\"white\" class=\"svg-text\" fill=\"white\">\r\n            Ja!\r\n          </text>\r\n        </g>\r\n      {:else if scene != 4}\r\n        <g transform=\"translate(270, 280)\" on:click={action}>\r\n\r\n          <rect\r\n            x=\"0px\"\r\n            y=\"0px\"\r\n            width=\"60px\"\r\n            height=\"40px\"\r\n            fill=\"darkblue\"\r\n            style=\"\" />\r\n          <text x=\"12px\" y=\"25px\" stroke=\"white\" class=\"svg-text\" fill=\"white\">\r\n            Actie\r\n          </text>\r\n        </g>\r\n      {/if}\r\n\r\n      <g transform=\"translate(360, 280)\" on:click={moveRechts}>\r\n\r\n        <rect\r\n          x=\"0px\"\r\n          y=\"0px\"\r\n          width=\"60px\"\r\n          height=\"40px\"\r\n          fill=\"darkblue\"\r\n          style=\"\" />\r\n        <rect\r\n          x=\"10px\"\r\n          y=\"15px\"\r\n          width=\"30px\"\r\n          height=\"10px\"\r\n          fill=\"white\"\r\n          style=\"\" />\r\n        <g transform=\"translate(40,5)\">\r\n          <polygon\r\n            points=\"0,0 0,30 15,15\"\r\n            fill=\"white\"\r\n            stroke-width=\"0.1px\"\r\n            stroke=\"white\" />\r\n        </g>\r\n\r\n        <path />\r\n\r\n      </g>\r\n    {/if}\r\n\r\n    {#if showCallJasper && bruid}\r\n      <text\r\n        class=\"svg-text\"\r\n        stroke=\"black\"\r\n        font-size=\"36\"\r\n        x={moveBX - 30}\r\n        y={moveBY - 25}\r\n        fill=\"black\">\r\n        Jasper!!\r\n      </text>\r\n    {/if}\r\n\r\n    {#if showCallRixt && bruidegom}\r\n      <text\r\n        class=\"svg-text\"\r\n        stroke=\"black\"\r\n        font-size=\"36\"\r\n        x={moveJX + 30}\r\n        y={moveJY - 25}\r\n        fill=\"black\">\r\n        Rixt!!\r\n      </text>\r\n    {/if}\r\n\r\n    {#if showHelpJasper && bruid}\r\n      <text\r\n        class=\"svg-text\"\r\n        stroke=\"black\"\r\n        font-size=\"36\"\r\n        x={moveJasperX - 10}\r\n        y={moveJasperY - 25}\r\n        fill=\"black\">\r\n        Help!!\r\n      </text>\r\n    {/if}\r\n\r\n    {#if showJaText}\r\n      <text\r\n        class=\"svg-text\"\r\n        stroke=\"black\"\r\n        font-size=\"36\"\r\n        x={moveBX - 30}\r\n        y={moveBY + 30}\r\n        fill=\"black\">\r\n        Ja!\r\n      </text>\r\n\r\n      <text\r\n        class=\"svg-text\"\r\n        stroke=\"black\"\r\n        font-size=\"36\"\r\n        x={moveJX + 70}\r\n        y={moveJY + 30}\r\n        fill=\"black\">\r\n        Ja!\r\n      </text>\r\n    {/if}\r\n\r\n    {#if showHelpRixt && bruidegom}\r\n      <text\r\n        class=\"svg-text\"\r\n        stroke=\"black\"\r\n        font-size=\"36\"\r\n        x={moveRixtX - 10}\r\n        y={moveRixtY - 25}\r\n        fill=\"black\">\r\n        Help!!\r\n      </text>\r\n    {/if}\r\n\r\n    {#if showRedStar}\r\n      <g\r\n        transform=\"translate({moveRedMonsterX - 65},{moveRedMonsterY - 40})\r\n        scale(1.6)\">\r\n\r\n        <polygon\r\n          points=\"0,100 70,75 70,0 120,50 195,25 160,80 220,145 130,130 95,210\r\n          80,125\"\r\n          fill=\"orange\"\r\n          stroke-width=\"3px\"\r\n          stroke=\"black\" />\r\n      </g>\r\n    {/if}\r\n    {#if showBlueStar}\r\n      <g\r\n        transform=\"translate({moveBlueMonsterX - 65},{moveBlueMonsterY - 40})\r\n        scale(1.6)\">\r\n\r\n        <polygon\r\n          points=\"0,100 70,75 70,0 120,50 195,25 160,80 220,145 130,130 95,210\r\n          80,125\"\r\n          fill=\"purple\"\r\n          stroke-width=\"3px\"\r\n          stroke=\"black\" />\r\n      </g>\r\n    {/if}\r\n    {#if intermission}\r\n      <svg>\r\n\r\n        <rect x=\"0px\" y=\"0px\" width=\"600px\" height=\"350px\" fill=\"black\" />\r\n\r\n      </svg>\r\n    {/if}\r\n  </svg>\r\n\r\n</main>\r\n","import App from './App.svelte';\r\n\r\nconst app = new App({\r\n\ttarget: document.body,\r\n\r\n});\r\n\r\nexport default app;"],"names":["noop","run","fn","blank_object","Object","create","run_all","fns","forEach","is_function","thing","safe_not_equal","a","b","append","target","node","appendChild","insert","anchor","insertBefore","detach","parentNode","removeChild","svg_element","name","document","createElementNS","text","data","createTextNode","empty","listen","event","handler","options","addEventListener","removeEventListener","attr","attribute","value","removeAttribute","getAttribute","setAttribute","current_component","set_current_component","component","dirty_components","binding_callbacks","render_callbacks","flush_callbacks","resolved_promise","Promise","resolve","update_scheduled","add_render_callback","push","flushing","seen_callbacks","Set","flush","i","length","update","$$","pop","callback","has","add","clear","fragment","before_update","dirty","p","ctx","after_update","outroing","make_dirty","then","fill","init","instance","create_fragment","not_equal","props","parent_component","prop_values","bound","on_mount","on_destroy","context","Map","callbacks","skip_bound","ready","ret","rest","hydrate","nodes","element","Array","from","childNodes","children","l","c","intro","block","delete","local","m","new_on_destroy","map","filter","mount_component","moveRedMonsterX","moveJasperY","moveRixtY","createElement","moveBX","moveJX","moveBY","moveJY","moveJasperX","showJasper","moveRixtX","showRixt","moveRedMonsterY","redMonster","moveBlueMonsterX","moveBlueMonsterY","blueMonster","scene","intermission","bruid","bruidegom","showHelpJasper","showCallJasper","showHelpRixt","showCallRixt","showRedStar","showBlueStar","monsterRotate","punch","showJa","final","moveHat","showJaText","bouquet","slaButton","nextScene","setTimeout","console","log","stepUp","stepUpMonster","location","reload","moveMonsterYUp","[object Object]","detaching","d","destroy_component","this","$destroy","type","index","indexOf","splice","$$props","obj","$$set","keys","body"],"mappings":"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"}